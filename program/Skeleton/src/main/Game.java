package main;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.Scanner;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Space-Miner
//  @ File Name : Game.java
//  @ Date : 17/03/2021
//  @ Author : Simon Zoltán
//
//



/**
 * Represents an instance of the running game. Hold reference to all the present Settlers, NonPlayers and Planets in the game.
 * @author Moha
 *
 */
public class Game {
	//Lists of objects present in game:
	private List<Settler> settlers = new ArrayList<Settler>();

	private List<Sun> suns = new ArrayList<Sun>();
	private List<Asteroid> asteroids = new ArrayList<Asteroid>();
	private List<NonPlayer> nonPlayers = new ArrayList<NonPlayer>();
	
	//Lists of objects scheduled to destroy:
	private List<Settler> settlersToRemove = new ArrayList<Settler>();
	
	private List<Sun> sunsToRemove = new ArrayList<Sun>();
	private List<Asteroid> asteroidsToRemove = new ArrayList<Asteroid>();
	private List<NonPlayer> nonPlayersToRemove = new ArrayList<NonPlayer>();
	
	private List<String> turnEvents = new ArrayList<String>();
	
	/**
	 * Adds a string to the turn events
	 * @param s this String will be in the turnEvents list (till the end of the turn)
	 */
	public void addTurnEvent(String s) {
		turnEvents.add(s);
	}
	
	/**
	 * Removes reference to objects, if they called remove
	 */
	public void cleanup () {
		for (Settler settler : settlersToRemove) {
			settlers.remove(settler);
		}
		
		for (Sun sun : sunsToRemove) {
			suns.remove(sun);
		}
		
		for (Asteroid asteroid : asteroidsToRemove) {
			asteroids.remove(asteroid);
		}
		
		for (NonPlayer nonPlayer : nonPlayersToRemove) {
			nonPlayers.remove(nonPlayer);
		}
	}

	/**
	 * Adds Settler to Game.
	 * @param settler Settler to be added.
	 */
	public void addSettler(Settler settler) {
		settlers.add(settler);
	}
	
	/**
	 * Prints all the turn events on the console 
	 */
	public String listTurnEvents() {
		String displayString = "# turn events:\n";
		
		for (String s : turnEvents) {
			displayString += s + "\n";
		}
		
		if (turnEvents.size() == 0)
			displayString += "-\n";
		
		return displayString;
	}
	
	/**
	 * Adds Sun to Game.
	 * @param sun Sun to be added.
	 */
	public void addSun(Sun sun) {
		suns.add(sun);
	}
	
	/**
	 * Adds Asteroid to Game
	 * @param asteroid Asteroid to be added
	 */
	public void addAsteroid(Asteroid asteroid) {
		asteroids.add(asteroid);
	}
	
	/**
	 * Adds NonPlayer to Game
	 * @param nonPlayer NonPlayer to be added
	 */
	public void addNonPlayer(NonPlayer nonPlayer) {
		nonPlayers.add(nonPlayer);
	}
	
	/**
	 * Adds Settler to the settlersToRemove list
	 * @param settler Settler to be added to the settlersToRemove list
	 */
	public void removeSettler(Settler settler) {
		settlersToRemove.add(settler);
	}
	
	/**
	 * Adds Sun to the sunsToRemove list
	 * @param sun Sun to be added to the sunsToRemove list
	 */
	public void removeSun(Sun sun) {
		sunsToRemove.add(sun);
	}
	
	/**
	 * Adds Asteroid to the asteroidsToRemove list
	 * @param asteroid Asteroid to be added to the asteroidsToRemove list
	 */
	public void removeAsteroid(Asteroid asteroid) {
		asteroidsToRemove.add(asteroid);
	}
	
	/**
	 * Adds NonPlayer to the nonPlayersToRemove list
	 * @param nonPlayer NonPlayer to be added to the asteroidsToRemove list
	 */
	public void removeNonPlayer(NonPlayer nonPlayer) {
		nonPlayersToRemove.add(nonPlayer);
	}
	
	/**
	 * Called, when conditions of victory are met.
	 * Finishes the game.
	 */
	public void gameWon() {
	}
	
	/**
	 * Checks if the game is lost
	 * @return true if the game is lost
	 */
	public Boolean isGameLost() {
		cleanup();
		
		if (settlers.size() == 0)
			return true;
		
		return false;
	}
	
	/**
	 * Called, when conditions of faliure are met.
	 * Finishes the game.
	 */
	public void gameLost() {
		/*for (Settler settler : settlers)
			settlersToRemove.add(settler);
		
		for (Sun sun : suns)
			sunsToRemove.add(sun);
		
		for (Asteroid asteroid : asteroids)
			asteroidsToRemove.add(asteroid);
		
		for (NonPlayer nonPlayer : nonPlayers)
			nonPlayersToRemove.add(nonPlayer);
		
		cleanup();*/
	}
	
	/**
	 * Starts turn, resets Settlers ability to make actions, calls onTurn on every controllable (directly or indirectly)
	 */
	public void startTurn() {
		cleanup();
		
		turnEvents.clear();
		
		if (isGameLost())
			gameLost();
		
		for (Sun sun : suns)
			sun.onTurn();
		
		// If a stargate moves to an asteroid that is later in the asteroids list then the stargate will move on from that asteroid if we dont set this variable here
		for (Asteroid asteroid : asteroids) {
			for (Building building : asteroid.getBuildings()) {
				building.setHadActionThisTurn(false);
			}
		}
		
		for (Asteroid asteroid : asteroids) 
			asteroid.onTurn();
		
		for (NonPlayer nonPlayer : nonPlayers)
			nonPlayer.onTurn();
		
		for (Settler settler : settlers) {
			settler.setHadAction(false);
		}
	}
	
	/**
	 * Lists every settler to the console
	 */
	public String listAllSettlers() {
		String ret = "";
		
		for (Settler settler : settlers)
			ret += settler.genUIString();
		
		return ret;
	}
	
	/**
	 * Inits the game
	 * @param isManual if this is true the user has to init every object in the game, if this is false the game will init itself
	 */
	public void initGame(Boolean isManual) {
		Inventory inventory = new Inventory();
		inventory.setNextId(0);
		
		suns.clear();
		asteroids.clear();
		settlers.clear();
		nonPlayers.clear();
		
		if (isManual)
			return;
		
		Random rnd = new Random();
		
		int amountOfSuns = rnd.nextInt(10) + 10;
		int amountOfAsteroidsPerSun = rnd.nextInt(30) + 10;
		
		int amountOfSettlers = 10;
		int amountOfAliens = 30;
		
		for (int i = 0; i < amountOfSuns; i++) {
			Sun sun = new Sun();
			sun.setOwner(this);
			sun.setIsRandom(true);
			suns.add(sun);
			
			for (int j = 0; j < amountOfAsteroidsPerSun; j++) {
				Asteroid asteroid = new Asteroid();
				asteroid.initialize();
				asteroid.setOwner(this);
				asteroid.setIsRandom(true);
				asteroid.setMySun(sun);
				sun.addAsteroid(asteroid);
				asteroids.add(asteroid);
			}
		}
		
		int neighbourhoodAmount = amountOfSuns * amountOfAsteroidsPerSun;
		
		for (int i = 0; i < neighbourhoodAmount; i++) {
			int first = rnd.nextInt(asteroids.size());
			Asteroid firstAsteroid = asteroids.get(first);
			
			int second = rnd.nextInt(asteroids.size());
			while (first == second) {
				second = rnd.nextInt(asteroids.size());
			}
			
			Asteroid secondAsteroid = asteroids.get(second);
			
			firstAsteroid.addNeighbour(secondAsteroid);
			secondAsteroid.addNeighbour(firstAsteroid);
		}
		
		int numOfAsteroids = amountOfSuns * amountOfAsteroidsPerSun;
		int asteroidIndex = rnd.nextInt(numOfAsteroids);
		Asteroid startAsteroid = asteroids.get(asteroidIndex);
		startAsteroid.setCloseToSun(false);
		
		for (int i = 0; i < amountOfSettlers; i++)
		{
			Settler settler = new Settler();
			settler.setOwner(this);
			settler.setAsteroid(startAsteroid);
			startAsteroid.addSettler(settler);
			settlers.add(settler);
		}
		
		// CHEAT SETTLER PLS REMOVE FROM PRODUCTION THX
		Settler settler = new Settler();
		settler.setOwner(this);
		settler.setAsteroid(startAsteroid);
		startAsteroid.addSettler(settler);
		settlers.add(settler);
		
		Inventory inv = settler.getInventory();
		inv.setCapacityM(1000);
		
		for (int i = 0; i < 100; i++) {
			inv.addMaterial(new Coal());
			inv.addMaterial(new Iron());
			inv.addMaterial(new Uran());
			inv.addMaterial(new Ice());
		}
		// -------------------------------------------
		
		for (int i = 0; i < amountOfAliens; i++)
		{
			Asteroid randomAsteroid = asteroids.get(rnd.nextInt(numOfAsteroids));
			
			Alien alien = new Alien();
			alien.setIsRandom(true);
			alien.setOwner(this);
			alien.setAsteroid(randomAsteroid);
			randomAsteroid.addNonPlayer(alien);
			nonPlayers.add(alien);
		}
		
		/*Sun sun = new Sun();
		sun.setOwner(this);
		suns.add(sun);
		
		Asteroid asteroid = new Asteroid();
		asteroid.initialize();
		asteroid.setOwner(this);
		asteroid.setMySun(sun);
		sun.addAsteroid(asteroid);
		asteroids.add(asteroid);
		
		Settler settler = new Settler();
		settler.setOwner(this);
		settler.setAsteroid(asteroid);
		asteroid.addSettler(settler);
		settlers.add(settler);
		
		Alien alien = new Alien();
		alien.setOwner(this);
		alien.setAsteroid(asteroid);
		asteroid.addNonPlayer(alien);
		nonPlayers.add(alien);*/
		
		startGame();
	}
	
	/**
	 * This function starts the game
	 */
	public void startGame() {
		startTurn();
	}
	
	/**
	 * This function loads the game from the game.txt
	 */
	public void loadGame() {
		List<StarGate> starGateLoadList = new ArrayList<StarGate>();
		List<Base> baseLoadList = new ArrayList<Base>();
		List<Material> materialLoadList = new ArrayList<Material>();
		List<Alien> alienLoadList = new ArrayList<Alien>();
		List<Robot> robotLoadList = new ArrayList<Robot>();
		List<Sun> sunLoadList = new ArrayList<Sun>();
		List<Asteroid> asteroidLoadList = new ArrayList<Asteroid>();
		List<Settler> settlerLoadList = new ArrayList<Settler>();
		List<Inventory> inventoryLoadList = new ArrayList<Inventory>();
		
		String loadString;
		
		try {
			File loadFile = new File("game.txt");
			Scanner loadScanner = new Scanner(loadFile);
			
			while (loadScanner.hasNextLine())
			{
				loadString = loadScanner.nextLine();
				
				switch (loadString) {
					case "Sun:":
						loadSun(loadScanner, sunLoadList, asteroidLoadList);
						
						break;
					case "Asteroid:":
						loadAsteroid(loadScanner, asteroidLoadList, settlerLoadList, materialLoadList, robotLoadList, alienLoadList, baseLoadList, starGateLoadList);
						
						break;
					case "Material:":
						loadString = loadScanner.nextLine();
						
						switch (loadString.split(" ")[1].charAt(0)) {
							case 'i':
								if (loadString.split(" ")[1].charAt(1) == 'c') {
									Ice ice = new Ice();
									ice.setId(loadString.split(" ")[1]);
									
									loadMaterial(ice, loadString, loadScanner, materialLoadList);
								}
								else {
									Iron iron = new Iron();
									iron.setId(loadString.split(" ")[1]);
									
									loadMaterial(iron, loadString, loadScanner, materialLoadList);
								}
								
								break;
							case 'u':
								Uran uran = new Uran();
								uran.setId(loadString.split(" ")[1]);
								
								loadMaterial(uran, loadString, loadScanner, materialLoadList);
								
								break;
							case 'c':
								Coal coal = new Coal();
								coal.setId(loadString.split(" ")[1]);
								
								loadMaterial(coal, loadString, loadScanner, materialLoadList);
								
								break;
						}
						
						break;
					case "Building:":
						loadString = loadScanner.nextLine();
						
						if (loadString.split(" ")[1].charAt(0) == 's')
							loadStarGate(loadScanner, loadString, starGateLoadList, asteroidLoadList);
						else
							loadBase(loadScanner, loadString, baseLoadList, asteroidLoadList);
						
						break;
					case "Settler:":
						loadSettler(loadScanner, settlerLoadList, asteroidLoadList, inventoryLoadList);
						
						break;
					case "Inventory:":
						loadInventory(loadScanner, inventoryLoadList, materialLoadList, starGateLoadList);
						
						break;
					case "NonPlayer:":
						loadString = loadScanner.nextLine();
						
						if (loadString.split(" ")[1].charAt(0) == 'r')
							loadRobot(loadScanner, loadString, robotLoadList, asteroidLoadList);
						else
							loadAlien(loadScanner, loadString, alienLoadList, asteroidLoadList, inventoryLoadList);
						
						break;
				}
			}
			
			loadScanner.close();
			
			for (Sun sun : sunLoadList)
				suns.add(sun);
			
			for (Asteroid asteroid : asteroidLoadList)
				asteroids.add(asteroid);
			
			for (Settler settler : settlerLoadList)
				settlers.add(settler);
			
			for (Alien alien : alienLoadList)
				nonPlayers.add(alien);
			
			for (Robot robot : robotLoadList)
				nonPlayers.add(robot);
		} 
		catch (FileNotFoundException e) {
			System.out.println("Can't load game.");
		}
	}
	
	/**
	 * This function loads a sun.
	 * The function assumes that the scanner is on the "Sun:" line in the txt and loads sun accordingly
	 * @param scanner scanner for the txt
	 * @param sunLoadList a temporary list cointaining all the suns loaded so far
	 * @param asteroidLoadList a temporary list containing all the asteroids loaded so far
	 */
	public void loadSun(Scanner scanner, List<Sun> sunLoadList, List<Asteroid> asteroidLoadList) {
		String loadString = scanner.nextLine();
		
		Boolean foundSun = false;
		Sun s = new Sun();
		
		// for clarity
		for (Sun sun : sunLoadList) {
			if (sun.getId().equals(loadString.split(" ")[1])) {
				foundSun = true;
				s = sun;
			}
		}
		
		if (!foundSun) {
			sunLoadList.add(s);
			s.setId(loadString.split(" ")[1]);
		}
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			s.setIsRandom(true);
		else
			s.setIsRandom(false);
		
		loadString = scanner.nextLine();
		
		while (loadString.split(" ")[0].equals("AsteroidId:")) {
			Boolean foundAsteroid = false;
			
			for (Asteroid asteroid : asteroidLoadList) {
				if (asteroid.getId().equals(loadString.split(" ")[1])) {
					foundAsteroid = true;
					s.addAsteroid(asteroid);
				}
			}
				
			if (!foundAsteroid) {
				Asteroid a = new Asteroid();
				a.setId(loadString.split(" ")[1]);
					
				s.addAsteroid(a);
					
				asteroidLoadList.add(a);
			}
			
			loadString = scanner.nextLine();
		}
		
		s.setOwner(this);
		
		loadString = scanner.nextLine();
	}
	
	/**
	 * This function loads an asteroid.
	 * The function assumes that the scanner is on the "Asteroid:" line in the txt and loads asteroid accordingly
	 * @param scanner scanner for the txt
	 * @param asteroidLoadList a temporary list containing all the asteroids loaded so far
	 * @param settlerLoadList a temporary list containing all the settlers loaded so far
	 * @param materialLoadList a temporary list containing all the materials loaded so far
	 * @param robotLoadList a temporary list containing all the robots loaded so far
	 * @param alienLoadList a temporary list containing all the aliens loaded so far
	 * @param baseLoadList a temporary list containing all the bases loaded so far
	 * @param starGateLoadList a temporary list containing all the stargates loaded so far
	 */
	public void loadAsteroid(Scanner scanner, List<Asteroid> asteroidLoadList, List<Settler> settlerLoadList, List<Material> materialLoadList, List<Robot> robotLoadList, List<Alien> alienLoadList, List<Base> baseLoadList, List<StarGate> starGateLoadList) {
		String loadString = scanner.nextLine();
		
		Boolean foundAsteroid = false;
		Asteroid a = new Asteroid();
		
		for (Asteroid asteroid : asteroidLoadList) {
			if (asteroid.getId().equals(loadString.split(" ")[1])) {
				foundAsteroid = true;
				a = asteroid;
			}
		}
		
		if (!foundAsteroid) {
			asteroidLoadList.add(a);
			a.setId(loadString.split(" ")[1]);
		}
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			a.setIsRandom(true);
		else
			a.setIsRandom(false);
		
		loadString = scanner.nextLine();
		
		a.setRockThickness(Integer.parseInt(loadString.split(" ")[1]));
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			a.setCloseToSun(true);
		else
			a.setCloseToSun(false);
		
		loadString = scanner.nextLine();
		
		a.setCapacity(Integer.parseInt(loadString.split(" ")[1]));
		
		loadString = scanner.nextLine();
		
		while (loadString.split(" ")[0].equals("settlerId:")) {
			Boolean foundSettler = false;
			
			for (Settler settler : settlerLoadList) {
				if (settler.getId().equals(loadString.split(" ")[1])) {
					foundSettler = true;
					a.addSettler(settler);
				}
			}
			
			if (!foundSettler) {
				Settler settler = new Settler();
				settler.setId(loadString.split(" ")[1]);
				
				a.addSettler(settler);
				
				settlerLoadList.add(settler);
			}
			
			loadString = scanner.nextLine();
		}
		
		while (loadString.split(" ")[0].equals("nonPlayerId:")) {
			Boolean foundNonPlayer = false;
			
			for (Alien alien : alienLoadList) {
				if (alien.getId().equals(loadString.split(" ")[1])) {
					foundNonPlayer = true;
					a.addNonPlayer(alien);
				}
			}
			
			for (Robot robot : robotLoadList) {
				if (robot.getId().equals(loadString.split(" ")[1])) {
					foundNonPlayer = true;
					a.addNonPlayer(robot);
				}
			}
			
			if (!foundNonPlayer) {
				if (loadString.split(" ")[1].charAt(0) == 'r') {
					Robot robot = new Robot();
					robot.setId(loadString.split(" ")[1]);
					
					a.addNonPlayer(robot);
					
					robotLoadList.add(robot);
				}
				else
				{
					Alien alien = new Alien();
					alien.setId(loadString.split(" ")[1]);
					
					a.addNonPlayer(alien);
					
					alienLoadList.add(alien);
				}
			}
			
			loadString = scanner.nextLine();
		}

		while (loadString.split(" ")[0].equals("MaterialId:")) {
			Boolean foundMaterial = false;
			
			for (Material material : materialLoadList) {
				if (material.getId().equals(loadString.split(" ")[1])) {
					foundMaterial = true;
					a.addMaterial(material);
				}
			}
			
			if (!foundMaterial) {
				if (loadString.split(" ")[1].charAt(0) == 'i') {
					if (loadString.split(" ")[1].charAt(1) == 'c') {
						Ice ice = new Ice();
						ice.setId(loadString.split(" ")[1]);
						
						a.addMaterial(ice);
						
						materialLoadList.add(ice);
					}
					else {
						Iron iron = new Iron();
						iron.setId(loadString.split(" ")[1]);
						
						a.addMaterial(iron);
						
						materialLoadList.add(iron);
					}
				}
				else if (loadString.split(" ")[1].charAt(0) == 'u') {
					Uran uran = new Uran();
					uran.setId(loadString.split(" ")[1]);
					
					a.addMaterial(uran);
					
					materialLoadList.add(uran);
				}
				else {
					Coal coal = new Coal();
					coal.setId(loadString.split(" ")[1]);
					
					a.addMaterial(coal);
					
					materialLoadList.add(coal);
				}
			}
			
			loadString = scanner.nextLine();
		}

		while (loadString.split(" ")[0].equals("NeighbourId:")) {
			Boolean foundNeighbour = false;
			
			for (Asteroid asteroid : asteroidLoadList) {
				if (asteroid.getId().equals(loadString.split(" ")[1])) {
					foundNeighbour = true;
					a.addNeighbour(asteroid);
				}
			}
			
			if (!foundNeighbour) {
				Asteroid asteroid = new Asteroid();
				asteroid.setId(loadString.split(" ")[1]);
				
				a.addNeighbour(asteroid);
				
				asteroidLoadList.add(asteroid);
			}
			
			loadString = scanner.nextLine();
		}

		while (loadString.split(" ")[0].equals("BuildingId:")) {
			Boolean foundBuilding = false;
			
			for (Base base : baseLoadList) {
				if (base.getId().equals(loadString.split(" ")[1])) {
					foundBuilding = true;
					a.addBuilding(base);
				}
			}
			
			for (StarGate starGate : starGateLoadList) {
				if (starGate.getId().equals(loadString.split(" ")[1])) {
					foundBuilding = true;
					a.addBuilding(starGate);
				}
			}
			
			if (!foundBuilding) {
				if (loadString.split(" ")[1].charAt(0) == 's') {
					StarGate starGate = new StarGate();
					starGate.setId(loadString.split(" ")[1]);
					
					a.addBuilding(starGate);
					
					starGateLoadList.add(starGate);
				}
				else {
					Base base = new Base();
					base.setId(loadString.split(" ")[1]);
					
					a.addBuilding(base);
					
					baseLoadList.add(base);
				}
			}
			
			loadString = scanner.nextLine();
		}
		
		a.setOwner(this);
	}
	
	/**
	 * This function loads a material.
	 * The function assumes that the scanner is on the "id: <id>" line in the txt and loads material accordingly
	 * @param m this is where the material will be loaded
	 * @param loadString This is a string containing the "id <id>"
	 * @param scanner scanner for the txt
	 * @param materialLoadList a temporary list containing all the materials loaded so far
	 */
	public void loadMaterial(Material m, String loadString, Scanner scanner, List<Material> materialLoadList) {
		Boolean foundMaterial = false;
		
		for (Material material : materialLoadList) {
			if (material.getId().equals(loadString.split(" ")[1])) {
				foundMaterial = true;
				m = material;
			}
		}
		
		if (!foundMaterial) {
			materialLoadList.add(m);
			m.setId(loadString.split(" ")[1]);
		}
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			m.setRadio(true);
		else
			m.setRadio(false);
		
		loadString = scanner.nextLine(); 
		
		m.setName(loadString.split(" ")[1]);
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			m.setCanEvaporate(true);
		else
			m.setCanEvaporate(false);
		
		loadString = scanner.nextLine();
		
		m.setExposedCounter(Integer.parseInt(loadString.split(" ")[1]));
		
		loadString = scanner.nextLine();
	}
	
	/**
	 * This function loads a stargate.
	 * The function assumes that the scanner is on the "id: <id>" line in the txt and loads stargate accordingly
	 * @param scanner scanner for the txt
	 * @param loadString This is a string containing the "id <id>"
	 * @param starGateLoadList a temporary list containing all the stargates loaded so far
	 * @param asteroidLoadList a temporary list containing all the asteroids loaded so far
	 */
	public void loadStarGate(Scanner scanner, String loadString, List<StarGate> starGateLoadList, List<Asteroid> asteroidLoadList) {
		Boolean foundStarGate = false;
		StarGate sg = new StarGate();
		
		for (StarGate starGate : starGateLoadList) {
			if (starGate.getId().equals(loadString.split(" ")[1])) {
				foundStarGate = true;
				sg = starGate;
			}
		}
		
		if (!foundStarGate) {
			sg.setId(loadString.split(" ")[1]);
			starGateLoadList.add(sg);
		}
		
		loadString = scanner.nextLine();
		
		Boolean foundAsteroid = false;
		
		for (Asteroid asteroid : asteroidLoadList) {
			if (asteroid.getId().equals(loadString.split(" ")[1])) {
				foundAsteroid = true;
				sg.setAsteroid(asteroid);
			}
		}
		
		if (!foundAsteroid) {
			Asteroid asteroid = new Asteroid();
			asteroid.setId(loadString.split(" ")[1]);
			
			sg.setAsteroid(asteroid);
			
			asteroidLoadList.add(asteroid);
		}
		
		loadString = scanner.nextLine();
		
		if (!loadString.split(" ")[1].equals("-")) {
			Boolean foundNeighbour = false;
		
			for (StarGate neighbour : starGateLoadList) {
				if (neighbour.getId().equals(loadString.split(" ")[1])) {
					foundNeighbour = true;
					sg.setNeighbour(neighbour);
				}
			}
		
			if (!foundNeighbour) {
				StarGate neighbour = new StarGate();
				neighbour.setId(loadString.split(" ")[1]);
			
				sg.setNeighbour(neighbour);
					
				starGateLoadList.add(neighbour);
			}
		}
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			sg.setWorks(true);
		else
			sg.setWorks(false);
			
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			sg.setWasInSunFlare(true);
		else
			sg.setWasInSunFlare(false);
			
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			sg.setRandom(true);
		else
			sg.setRandom(false);
		
		loadString = scanner.nextLine();
		
		sg.setOwner(this);
	}
	
	/**
	 * This function loads a base.
	 * The function assumes that the scanner is on the "id: <id>" line in the txt and loads base accordingly
	 * @param scanner scanner for the txt
	 * @param loadString This is a string containing the "id <id>"
	 * @param baseLoadList a temporary list containing all the bases loaded so far
	 * @param asteroidLoadList a temporary list containing all the stargates loaded so far
	 */
	public void loadBase(Scanner scanner, String loadString, List<Base> baseLoadList, List<Asteroid> asteroidLoadList) {
		Boolean foundBase = false;
		Base b = new Base();
		
		for (Base base : baseLoadList) {
			if (base.getId().equals(loadString.split(" ")[1])) {
				foundBase = true;
				b = base;
			}
		}
		
		if (!foundBase) {
			b.setId(loadString.split(" ")[1]);
			baseLoadList.add(b);
		}
		
		loadString = scanner.nextLine();
		
		Boolean foundAsteroid = false;
		
		for (Asteroid asteroid : asteroidLoadList) {
			if (asteroid.getId().equals(loadString.split(" ")[1])) {
				foundAsteroid = true;
				b.setAsteroid(asteroid);
			}
		}
		
		if (!foundAsteroid) {
			Asteroid asteroid = new Asteroid();
			asteroid.setId(loadString.split(" ")[1]);
			
			b.setAsteroid(asteroid);
			
			asteroidLoadList.add(asteroid);
		}
		
		loadString = scanner.nextLine();
		
		b.setOwner(this);
	}
	
	/**
	 * This function loads an settler.
	 * The function assumes that the scanner is on the "Settler:" line in the txt and loads settler accordingly
	 * @param scanner scanner for the txt
	 * @param settlerLoadList a temporary list containing all the settlers loaded so far
	 * @param asteroidLoadList a temporary list containing all the asteroids loaded so far
	 * @param inventoryLoadList a temporary list containing all the inventories loaded so far
	 */
	public void loadSettler(Scanner scanner, List<Settler> settlerLoadList, List<Asteroid> asteroidLoadList, List<Inventory> inventoryLoadList) {
		String loadString = scanner.nextLine();
		
		Boolean foundSettler = false;
		Settler s = new Settler();
		
		for (Settler settler : settlerLoadList) {
			if (settler.getId().equals(loadString.split(" ")[1])) {
				foundSettler = true;
				s = settler;
			}
		}
		
		if (!foundSettler) {
			s.setId(loadString.split(" ")[1]);
			settlerLoadList.add(s);
		}
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			s.setHadAction(true);
		else
			s.setHadAction(false);
		
		loadString = scanner.nextLine();
		
		Boolean foundAsteroid = false;
		
		for (Asteroid asteroid : asteroidLoadList) {
			if (asteroid.getId().equals(loadString.split(" ")[1])) {
				foundAsteroid = true;
				s.setAsteroid(asteroid);
			}
		}
		
		if (!foundAsteroid) {
			Asteroid asteroid = new Asteroid();
			asteroid.setId(loadString.split(" ")[1]);
			
			s.setAsteroid(asteroid);
			
			asteroidLoadList.add(asteroid);
		}
		
		loadString = scanner.nextLine();
		
		Boolean foundInventory = false;
		
		for (Inventory inventory : inventoryLoadList) {
			if (inventory.getId().equals(loadString.split(" ")[1])) {
				foundInventory = true;
				s.setInventory(inventory);
			}
		}
		
		if (!foundInventory) {
			Inventory inventory = new Inventory();
			inventory.setId(loadString.split(" ")[1]);
			
			s.setInventory(inventory);
			
			inventoryLoadList.add(inventory);
		}
		
		loadString = scanner.nextLine();
		
		s.setOwner(this);
	}
	
	/**
	 * This function loads an inventory.
	 * The function assumes that the scanner is on the "Inventory:" line in the txt and loads inventory accordingly
	 * @param scanner scanner for the txt
	 * @param inventoryLoadList a temporary list containing all the inventories loaded so far
	 * @param materialLoadList a temporary list containing all the materials loaded so far
	 * @param starGateLoadList a temporary list containing all the stargates loaded so far
	 */
	public void loadInventory(Scanner scanner, List<Inventory> inventoryLoadList, List<Material> materialLoadList, List<StarGate> starGateLoadList) {
		String loadString = scanner.nextLine();
		
		Boolean foundInventory = false;
		Inventory i = new Inventory();
		
		for (Inventory inventory : inventoryLoadList) {
			if (inventory.getId().equals(loadString.split(" ")[1])) {
				foundInventory = true;
				i = inventory;
			}
		}
		
		if (!foundInventory) {
			i.setId(loadString.split(" ")[1]);
			inventoryLoadList.add(i);
		}
		
		loadString = scanner.nextLine();
		
		i.setCapacityM(Integer.parseInt(loadString.split(" ")[1]));
		
		loadString = scanner.nextLine();
		
		i.setCapacitySG(Integer.parseInt(loadString.split(" ")[1]));
		
		loadString = scanner.nextLine();
		
		while (loadString.split(" ")[0].equals("MaterialId:")) {
			if (loadString.split(" ")[1].equals("-"))
				continue;
			
			Boolean foundMaterial = false;
			
			if (loadString.split(" ")[1].charAt(0) == 'i') {
				if (loadString.split(" ")[1].charAt(1) == 'r') {
					Iron iron = new Iron();
					
					for (Material material : materialLoadList) {
						if (material.getId().equals(loadString.split(" ")[1])) {
							foundMaterial = true;
							iron = (Iron)material;
						}
					}
					
					if (!foundMaterial) {
						iron.setId(loadString.split(" ")[1]);
						i.addMaterial(iron);
						
						materialLoadList.add(iron);
					}
				} else {
					Ice ice = new Ice();
					
					for (Material material : materialLoadList) {
						if (material.getId().equals(loadString.split(" ")[1])) {
							foundMaterial = true;
							ice = (Ice)material;
						}
					}
					
					if (!foundMaterial) {
						ice.setId(loadString.split(" ")[1]);
						i.addMaterial(ice);
						
						materialLoadList.add(ice);
					}
				}
			}
			else if(loadString.split(" ")[1].charAt(0) == 'u') {
				Uran uran = new Uran();
				
				for (Material material : materialLoadList) {
					if (material.getId().equals(loadString.split(" ")[1])) {
						foundMaterial = true;
						uran = (Uran)material;
					}
				}
				
				if (!foundMaterial) {
					uran.setId(loadString.split(" ")[1]);
					i.addMaterial(uran);
					
					materialLoadList.add(uran);
				}
			} else {
				Coal coal = new Coal();
				
				for (Material material : materialLoadList) {
					if (material.getId().equals(loadString.split(" ")[1])) {
						foundMaterial = true;
						coal = (Coal)material;
					}
				}
				
				if (!foundMaterial) {
					coal.setId(loadString.split(" ")[1]);
					i.addMaterial(coal);
					
					materialLoadList.add(coal);
				}
			}
			
			loadString = scanner.nextLine();
		}
		
		while (loadString.split(" ")[0].equals("StarGateId:")) {
			if (loadString.split(" ")[0].equals("MaterialId:"))
				continue;
			
			Boolean foundStarGate = false;
			
			StarGate sg = new StarGate();
			
			for (StarGate starGate : starGateLoadList) {
				if (starGate.getId().equals(loadString.split(" ")[1])) {
					foundStarGate = true;
					sg = starGate;
				}
			}
			
			if (!foundStarGate) {
				sg.setId(loadString.split(" ")[1]);
				starGateLoadList.add(sg);
				
				i.addStarGate(sg);
			}
			
			loadString = scanner.nextLine();
		}
		
		loadString = scanner.nextLine();
	}
	
	/**
	 * This function loads an robot.
	 * The function assumes that the scanner is on the "id: <id>" line in the txt and loads robot accordingly
	 * @param scanner scanner for the txt
	 * @param loadString This is a string containing the "id <id>"
	 * @param robotLoadList a temporary list containing all the robots loaded so far
	 * @param asteroidLoadList a temporary list containing all the asteroids loaded so far
	 */
	public void loadRobot(Scanner scanner, String loadString, List<Robot> robotLoadList, List<Asteroid> asteroidLoadList) {
		Boolean foundRobot = false;
		Robot r = new Robot();
		
		for (Robot robot : robotLoadList) {
			if (robot.getId().equals(loadString.split(" ")[1])) {
				foundRobot = true;
				r = robot;
			}
		}
		
		if (!foundRobot) {
			r.setId(loadString.split(" ")[1]);
			robotLoadList.add(r);
		}
		
		loadString = scanner.nextLine();
		
		Boolean foundAsteroid = false;
		
		for (Asteroid asteroid : asteroidLoadList) {
			if (asteroid.getId().equals(loadString.split(" ")[1])) {
				foundAsteroid = true;
				r.setAsteroid(asteroid);
			}
		}
		
		if (!foundAsteroid) {
			Asteroid asteroid = new Asteroid();
			asteroid.setId(loadString.split(" ")[1]);
			
			r.setAsteroid(asteroid);
			
			asteroidLoadList.add(asteroid);
		}
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			r.setIsRandom(true);
		else
			r.setIsRandom(false);
		
		loadString = scanner.nextLine();
		
		r.setOwner(this);
	}
	
	/**
	 * This function loads an alien.
	 * The function assumes that the scanner is on the "id: <id>" line in the txt and loads alien accordingly
	 * @param scanner scanner for the txt
	 * @param loadString This is a string containing the "id <id>"
	 * @param alienLoadList a temporary list containing all the aliens loaded so far
	 * @param asteroidLoadList a temporary list containing all the asteroids loaded so far
	 * @param inventoryLoadList a temporary list containing all the inventories loaded so far
	 */
	public void loadAlien(Scanner scanner, String loadString, List<Alien> alienLoadList, List<Asteroid> asteroidLoadList, List<Inventory> inventoryLoadList) {
		Boolean foundAlien = false;
		Alien a = new Alien();
		
		for (Alien alien : alienLoadList) {
			if (alien.getId().equals(loadString.split(" ")[1])) {
				foundAlien = true;
				a = alien;
			}
		}
		
		if (!foundAlien) {
			a.setId(loadString.split(" ")[1]);
			alienLoadList.add(a);
		}
		
		loadString = scanner.nextLine();
		
		Boolean foundAsteroid = false;
		
		for (Asteroid asteroid : asteroidLoadList) {
			if (asteroid.getId().equals(loadString.split(" ")[1])) {
				foundAsteroid = true;
				a.setAsteroid(asteroid);
			}
		}
		
		if (!foundAsteroid) {
			Asteroid asteroid = new Asteroid();
			asteroid.setId(loadString.split(" ")[1]);
			
			a.setAsteroid(asteroid);
			
			asteroidLoadList.add(asteroid);
		}
		
		loadString = scanner.nextLine();
		
		if (loadString.split(" ")[1].equals("t"))
			a.setIsRandom(true);
		else
			a.setIsRandom(false);
		
		loadString = scanner.nextLine();
		
		Boolean foundInventory = false;
		
		for (Inventory inventory : inventoryLoadList) {
			if (inventory.getId().equals(loadString.split(" ")[1])) {
				foundInventory = true;
				a.setInventory(inventory);
			}
		}
		
		if (!foundInventory) {
			Inventory inventory = new Inventory();
			inventory.setId(loadString.split(" ")[1]);
			
			a.setInventory(inventory);
			
			inventoryLoadList.add(inventory);
		}
		
		loadString = scanner.nextLine();
		
		a.setOwner(this);
	}
	
	/**
	 * This function saves game to the game.txt
	 */
	public void saveGame() {
		String saveString = "";
		
		for (Sun sun : suns) {
			saveString += "Sun:\n" + sun.genSaveString() + "\n----------------------------------------------------\n";
			
			for (Asteroid asteroid : sun.getAsteroids()) {
				saveString += "Asteroid:\n" + asteroid.genSaveString() + "\n----------------------------------------------------\n";
				
				for (Material material : asteroid.getMaterials()) {
					saveString += "Material:\n" + material.genUIString() + "\n----------------------------------------------------\n";
				}
				
				for (Building building : asteroid.getBuildings()) {
					saveString += "Building:\n" + building.genSaveString() + "\n----------------------------------------------------\n";
				}
				
				for (Settler settler : asteroid.getSettelrs()) {
					saveString += "Settler:\n" + settler.genSaveString() + "\n----------------------------------------------------\n";
					
					saveString += "Inventory:\n" + settler.getInventory().genSaveString() + "\n----------------------------------------------------\n";
					
					for (Material material : settler.getInventory().getMaterials()) {
						saveString += "Material:\n" + material.genSaveString() + "\n----------------------------------------------------\n";
					}
					
					for (StarGate stargate : settler.getInventory().getStarGates()) {
						saveString += "Building:\n" + stargate.genSaveString() + "\n----------------------------------------------------\n";
					}
				}
				
				for (NonPlayer nonPlayer : asteroid.getNonPlayers()) {
					saveString += "NonPlayer:\n" + nonPlayer.genSaveString() + "\n----------------------------------------------------\n";		
				}
			}
		}
		
		try {
			FileWriter saveWriter = new FileWriter("game.txt");
			saveWriter.write(saveString);
			saveWriter.close();
		} 
		catch (IOException e) {
		    System.out.println("Can't save game.");
		}
	}
	
	/**
	 * This function returns a settler with a given id
	 * @param id the id of the settler
	 * @return the settler with the id
	 */
	public Settler getSettlerWithId(String id) {
		for (Settler settler : settlers)
			if (settler.getId().equals(id))
				return settler;
		
		return null;
	}
	
	/**
	 * This function returns an asteroid with a given id
	 * @param id the id of the asteroid
	 * @return the asteroid with the id
	 */
	public Asteroid getAsteroidWithId(String id) {
		for (Asteroid asteroid : asteroids)
			if (asteroid.getId().equals(id))
				return asteroid;
		
		return null;
	}
	
	/**
	 * This function returns an sun with a given id
	 * @param id the id of the sun
	 * @return the sun with the id
	 */
	public Sun getSunWithId(String id) {
		for (Sun sun : suns)
			if (sun.getId().equals(id))
				return sun;
		
		return null;
	}
	
	/**
	 * This function returns an alien with a given id
	 * @param id the id of the alien
	 * @return the alien with the id
	 */
	public Alien getAlienWithId(String id) {
		for (NonPlayer nonPlayer : nonPlayers)
			if (nonPlayer.getId().equals(id))
				return (Alien)nonPlayer;
		
		return null;
	}
	
	/**
	 * This function returns an robot with a given id
	 * @param id the id of the robot
	 * @return the robot with the id
	 */
	public Robot getRobotWithId(String id) {
		for (NonPlayer nonPlayer : nonPlayers)
			if (nonPlayer.getId().equals(id))
				return (Robot)nonPlayer;
		
		return null;
	}
	
	/**
	 * This function returns an stargate with a given id
	 * @param id the id of the stargate
	 * @return the stargate with the id
	 */
	public StarGate getStarGateWithId(String id) {
		for (Settler settler : settlers) {
			for (StarGate starGate : settler.getInventory().getStarGates())
				if (starGate.getId().equals(id))
					return starGate;
		}
		
		for (Asteroid asteroid : asteroids) {
			for (Building starGate : asteroid.getBuildings())
				if (starGate.getId().equals(id))
					return (StarGate)starGate;
		}
		
		return null;
	}
	
	/**
	 * This function returns an base with a given id
	 * @param id the id of the base
	 * @return the base with the id
	 */
	public Base getBaseWithId(String id) {
		for (Asteroid asteroid : asteroids) {
			for (Building base : asteroid.getBuildings())
				if (base.getId().equals(id))
					return (Base)base;
		}
		
		return null;
	}

	/**
	 * This function returns an material with a given id
	 * @param id the id of the material
	 * @return the material with the id
	 */
	public Material getMaterialWithId(String id) {
		for (Settler settler : settlers) {
			for (Material material : settler.getInventory().getMaterials())
				if (material.getId().equals(id))
					return material;
		}
		
		for (Asteroid asteroid : asteroids) {
			for (Material material : asteroid.getMaterials())
				if (material.getId().equals(id))
					return material;
		}
		
		return null;
	}
	
	public String[] getSettlerIds() {
		String[] ret = new String[settlers.size()];
		
		int i = 0;
		
		for (Settler settler : settlers) {
			ret[i] = settler.getId();
			i++;
		}
		
		return ret;
	}
	
	public String[] getAsteroidIds() {
		String[] ret = new String[asteroids.size()];
		
		int i = 0;
		
		for (Asteroid asteroid : asteroids) {
			ret[i] = asteroid.getId();
			i++;
		}
		
		return ret;
	}
	
	public String[] getSettlersGates(String id) {
		String[] ret = new String[getSettlerWithId(id).getInventory().getStarGates().size()];
		
		int i = 0;
		
		for (StarGate stargate : getSettlerWithId(id).getInventory().getStarGates()) {
			ret[i] = stargate.getId();
			i++;
		}
		
		return ret;
	}
	
	public String[] getSettlersMaterials(String id) {
		String[] ret = new String[getSettlerWithId(id).getInventory().getMaterials().size()];
		
		int i = 0;
		
		for (Material material : getSettlerWithId(id).getInventory().getMaterials()) {
			ret[i] = material.getId();
			i++;
		}
		
		return ret;
	}
	
	public String[] getSettlersNeighboursID(String id) {
		String[] ret = new String[getSettlerWithId(id).getAsteroid().getNeighbours().size()];
		
		int i = 0;
		
		for (Asteroid asteroid : getSettlerWithId(id).getAsteroid().getNeighbours()) {
			ret[i] = asteroid.getId();
			i++;
		}
		
		return ret;
	}
	
	public String[] getSettlersStargatesID(String id) {
		String[] ret = new String[getSettlerWithId(id).getAsteroid().getBuildings().size()];
		
		int i = 0;
		
		for (Building building : getSettlerWithId(id).getAsteroid().getBuildings()) {
			ret[i] = building.getId();
			i++;
		}
		
		return ret;
	}
}
