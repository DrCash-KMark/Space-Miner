package main;

import java.util.List;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Space-Miner
//  @ File Name : StarGate.java
//  @ Date : 17/03/2021
//  @ Author : 
//
//



/**
 * StarGate class. Responsible for creating destroying and managing StarGates.
 */
public class StarGate extends Building implements Moving {
	private StarGate neighbour;
	private boolean works;
	private boolean wasInSunFlare;
	private boolean isRandom;
	
//Constructors:----------------------------------------------------------------	
	
	/**
	 * constructor for StarGate without parameter
	 */
	public StarGate() {
		id = "stg" + nextId;
		nextId++;
		works = false;
		wasInSunFlare = false;
		isRandom = true;
	}
	
	public StarGate(String _id, Asteroid _asteroid, StarGate _neighbour, Boolean _works, Boolean _wasInSunFlare, Boolean _isRandom) {
		id = _id;
		asteroid = _asteroid;
		neighbour = _neighbour;
		works = _works;
		wasInSunFlare = _wasInSunFlare;
		isRandom = _isRandom;
	}

//Get/Set-----------------------------------------------------------------
	
	public StarGate getNeighbour() {
		return neighbour;
	}


	public void setNeighbour(StarGate neighbour) {
		this.neighbour = neighbour;
	}

	public boolean getWorks() {
		return works;
	}


	public void setWorks(boolean works) {
		this.works = works;
	}


	public boolean getWasInSunFlare() {
		return wasInSunFlare;
	}


	public void setWasInSunFlare(boolean wasInSunFlare) {
		this.wasInSunFlare = wasInSunFlare;
	}


	public boolean getRandom() {
		return isRandom;
	}


	public void setRandom(boolean isRandom) {
		this.isRandom = isRandom;
	}

//---------------------------------------------------------------------------------------	
//Inherited:-----------------------------------------------------------------------------	
	
	//Building:
	
	/**
	 * function for placing the StarGate on an asteroid
	 * @param a: Asteroid: asteroid on which the StarGate is placed
	 */
	public void onPlace() {				
		if (neighbour == null)
		{
			return;
		}
				
		if (neighbour.getAsteroid() != null);
		{
			neighbour.setWorks(true);
			works = true;
		}
	}

	/**
	 * function for destroying the StarGate
	 */
	public void destroy() {
		neighbour.setWorks(false);		
		neighbour.setNeighbour(null);
		if (asteroid != null) {
			asteroid.removeBuilding(this);			
		}
	}

	//Printable:	
	
	@Override
	public String genUIString() {
		return "StarGate id: " + id + "\n"
				+ "isRandom: " + Tools.bool(isRandom) + "\n" 
				+ "works: " + Tools.bool(works) + "\n"
				+ "wasInSunFlare: " + Tools.bool(wasInSunFlare) + "\n" 
				+ "neighbour: " + Tools.id(neighbour) + "\n"
				+ "asteroid: " + Tools.id(asteroid) + "\n";
	}	

	@Override
	public String genSaveString() {
		return "id: " + id + "\n"
				+ "asteroid: " + Tools.id(asteroid) + "\n"
				+ "neighbour: " + Tools.id(neighbour) + "\n"
				+ "works: " + Tools.bool(works) + "\n"
				+ "wasInSunFlare: " + Tools.bool(wasInSunFlare) + "\n"
				+ "isRandom: " + Tools.bool(isRandom);
	}

//Controllable:	
	
	@Override
	public void onTurn() {
		if (wasInSunFlare) {
			if (isRandom) {
				List<Asteroid> neighbourAsteroids = asteroid.getNeighbours();
				if (!neighbourAsteroids.isEmpty()) {
					this.move(neighbourAsteroids.get(0));
				}
			}
		}
	}

//ReactsToSunFlare
	
	@Override
	public void getNotifiedAboutSunflare() {
		wasInSunFlare = true;
	}

//----------------------------------------------------------------------------------	
//Own methods:----------------------------------------------------------------------------	
	
	/**
	 * Move the gate to the given asteroid.
	 * @param destination
	 */
	@Override
	public void move(Asteroid destination) {
		if (asteroid != null) {
			if (asteroid.getNeighbours().contains(destination)) {
				this.asteroid.removeBuilding(this);
				destination.addBuilding(this);
				this.asteroid = destination;				
			}
		}
	}

	/**
	 * Move the gate to the given stargate.
	 * @param destination
	 */
	@Override
	public void move(StarGate destination) {
		if (destination.getWorks()) {
			Asteroid destAsteroid = destination.getNeighbour().getAsteroid();
			if (destAsteroid != null) {
				if (asteroid != null) {
					asteroid.removeBuilding(this);
				}
				destAsteroid.addBuilding(this);
				asteroid = destAsteroid;
			}
		}
	}

	/*
	/**
	 * function for getting the asteroid on which the neighbouring StarGate is placed
	 * @return neighbour: Asteroid: this is the neighbouring StarGate's asteroid
	 */
	/*
	public Asteroid getNeighbourAsteroid() {
		return neighbour.getAsteroid();
	}
	*/
	
}
