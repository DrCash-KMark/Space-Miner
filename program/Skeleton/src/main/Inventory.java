package main;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Space-Miner
//  @ File Name : Inventory.java
//  @ Date : 17/03/2021
//  @ Author : Barkanyi
//
//


/**
 * List are only available in java7 or older.
 * @author Barkanyi
 *
 */
public class Inventory {
	private LinkedList<Material> materials;
	private LinkedList<StarGate> starGate;
	private int capacity;
	private Main main;
	private String name;
	
	/**
	 * Constructor for Inventory without parameters.
	 */
	Inventory(){
		this.materials = new LinkedList<>();
		this.starGate = new LinkedList<>();
		this.capacity = 10;
	}
	
	/**
	 * Constructor for the Inventory which sets all parameters at once.
	 * @param materials
	 * @param starGate
	 */
	Inventory(LinkedList<Material> materials, LinkedList<StarGate> starGate, int capacity){
		this.materials = materials;
		this.starGate = starGate;
		this.capacity = capacity;
	}
	
	/**
	 * The setter of the Main logger.
	 * Only for testing.
	 * @param m: Main
	 */
	public void setMain(Main m) {
		main = m;
	}
	
	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}
	
	/**
	 * Getter of the materials.
	 * @return materials: LinkedList<Material>
	 */
	public LinkedList<Material> getMaterials(){
		return materials;
	}
	
	/**
	 * Remove a material to the materials which are in the inventory.
	 * @param m the material that will be removed from the inventory
	 * @return removed material or null if the inventory not contains the material
	 */
	public Material removeInventory(Material m) {
		main.log(false, name, getClass().getName(), "removeInventory(" + m.getName() + ":" + m.getClass().getName() + ")");
	
		if(materials.remove(m)) {
			main.log(true, m.getName(), m.getClass().getName(), "");
			
			return m;
		}
		
		main.log(true, "null", "null", "");
		return null;
	}
	
	/**
	 * Remove a stargate to the stargates which are in the inventory.
	 * @return removed stargate or null if the inventory not contains stargate
	 */
	public StarGate removeStarGate() {
		main.log(false, name, getClass().getName(), "removeStarGate()");
		
		if(starGate.size()!=0) {
			main.log(true, starGate.get(0).getName(), starGate.get(0).getClass().getName(), "");
			
			return starGate.get(0);
		}
		
		main.log(true, "null", "StarGate", "");
		
		return null;
	}
	
	/**
	 * Compares the given and the local inventory material list and 
	 * returns with the not remainder.
	 * @param i the given inventory
	 * @return remainder
	 */
	public Inventory subSet(Inventory i) {
		main.log(false, name, getClass().getName(), "subSet(" + i.getName() + ":" + i.getClass().getName() + ")");
		
		Inventory remainder = new Inventory();
		
		remainder.setMain(main);
		remainder.setName("subset");
		
		Iterator<Material> iRecipe = materials.iterator();
	    while (iRecipe.hasNext()) {
	    	
	    	Material material = i.removeInventory(iRecipe.next());
	    	if(material==null) {
	    		remainder.addInventory(material);
	    	}
	    	else {
	    		 i.addInventory(material);
	    	}
	    }
	    
	    main.log(true, remainder.getName(), remainder.getClass().getName(), "");
	    
		return remainder;
	}
	
	/**
 	 *Compares the given and the local inventory materials list and
	 *removes all contained element and return the remainder.
	 * @param i the given inventory
	 * @return differences
	 */
	public Inventory subtraction(Inventory i) {
		main.log(false, name, getClass().getName(), "subtraction(" + i.getName() + ":" + i.getClass().getName() + ")");
		
		Inventory remainder = new Inventory();
		
		remainder.setMain(main);
		remainder.setName("subtraction");
		
		Iterator<Material> iRecipe = materials.iterator();
	    while (iRecipe.hasNext()) {
	    	
	    	Material material = i.removeInventory(iRecipe.next());
	    	if(material==null) {
	    		remainder.addInventory(material);
	    	}
	    }
	    main.log(true, remainder.getName(), remainder.getClass().getName(), "");
	    
		return remainder;
	}	
	
	/**
	 * Adds the given stargate to the stargate list.
	 * @param sg the stargate the will be added to the stargate list
	 */
	public void addStarGate(StarGate sg) {
		main.log(false, name, getClass().getName(), "addStarGate(" + sg.getName() + ":" + sg.getClass().getName() + ")");
		
		if(starGate.size()<2) {
			starGate.add(sg);
		}
		
		main.log(true, "void", "void", "");
	}
	
	/**
	 * Adds the given material to the materials list.
	 * @param m the material the will be added to the materials list
	 */
	public void addInventory(Material m) {
		if (m != null)
		{
			main.log(false, name, getClass().getName(), "addInventory(" + m.getName() + ":" + m.getClass().getName() + ")");
			materials.add(m);
		}
		else
			main.log(false, name, getClass().getName(), "addInventory(null:null)");
		
		main.log(true, "void", "void", "");
	}

}
		