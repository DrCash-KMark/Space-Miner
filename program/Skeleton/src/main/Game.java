package main;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.Scanner;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Space-Miner
//  @ File Name : Game.java
//  @ Date : 17/03/2021
//  @ Author : Simon Zoltán
//
//



/**
 * Represents an instance of the running game. Hold reference to all the present Settlers, Robots and Planets in the game.
 * @author Simon
 *
 */
public class Game {
	private UI ui;
	
	//Lists of objects present in game:
	private List<Settler> settlers = new ArrayList<Settler>();
	//private List<Controllable> controllables = new ArrayList<Controllable>();

	// maybe?
	private List<Sun> suns = new ArrayList<Sun>();
	private List<Asteroid> asteroids = new ArrayList<Asteroid>();
	private List<NonPlayer> nonPlayers = new ArrayList<NonPlayer>();
	
	//Lists of objects scheduled to destroy:
	private List<Settler> settlersToRemove = new ArrayList<Settler>();
	//private List<Controllable> controllablesToRemove = new ArrayList<Controllable>();
	
	private List<Sun> sunsToRemove = new ArrayList<Sun>();
	private List<Asteroid> asteroidsToRemove = new ArrayList<Asteroid>();
	private List<NonPlayer> nonPlayersToRemove = new ArrayList<NonPlayer>();
	
	//Event related:-----------------------------------------------------------------
	
	/**
	 * For testing only!
	 * Removes reference to objects, if they called destroyMe or killMe.
	 */
	public void cleanup () {
		for (Settler settler : settlersToRemove) {
			settlers.remove(settler);
		}
		
		/*for (Controllable controllable : controllablesToRemove) {
			controllables.remove(controllable);
		}*/
		
		for (Sun sun : sunsToRemove) {
			suns.remove(sun);
		}
		
		for (Asteroid asteroid : asteroidsToRemove) {
			asteroids.remove(asteroid);
		}
		
		for (NonPlayer nonPlayer : nonPlayersToRemove) {
			nonPlayers.remove(nonPlayer);
		}
	}

	/**
	 * Adds Settler to Game.
	 * @param settler Settler to be added.
	 */
	public void addSettler(Settler settler) {
		settlers.add(settler);
	}
	
	/*public void addControllable(Controllable controllable) {
		controllables.add(controllable);
	}*/
	
	public void addSun(Sun sun) {
		suns.add(sun);
	}
	
	public void addAsteroid(Asteroid asteroid) {
		asteroids.add(asteroid);
	}
	
	public void addNonPlayer(NonPlayer nonPlayer) {
		nonPlayers.add(nonPlayer);
	}
	
	public void removeSettler(Settler settler) {
		settlersToRemove.add(settler);
	}
	
	/*public void removeControllable(Controllable controllable) {
		controllablesToRemove.add(controllable);
	}*/
	
	public void removeSun(Sun sun) {
		sunsToRemove.add(sun);
	}
	
	public void removeAsteroid(Asteroid asteroid) {
		asteroidsToRemove.add(asteroid);
	}
	
	public void removeNonPlayer(NonPlayer nonPlayer) {
		nonPlayersToRemove.add(nonPlayer);
	}
	
	/**
	 * Called, when conditions of victory are met.
	 * Finishes the game.
	 */
	public void gameWon() {
		ui.displayMessage("The game is won!");
	}
	
	public Boolean isGameLost() {
		cleanup();
		
		if (settlers.size() == 0)
			return true;
		
		return true;
	}
	
	public void gameLost() {
		for (Settler settler : settlers)
			settlersToRemove.add(settler);
		
		/*for (Controllable controllable : controllables)
			controllablesToRemove.add(controllable);*/
		
		for (Sun sun : suns)
			sunsToRemove.add(sun);
		
		for (Asteroid asteroid : asteroids)
			asteroidsToRemove.add(asteroid);
		
		for (NonPlayer nonPlayer : nonPlayers)
			nonPlayersToRemove.add(nonPlayer);
		
		cleanup();
		
		ui.displayMessage("The game is lost!");
	}
	
	public void startTurn() {
		cleanup();
		
		for (Sun sun : suns)
			sun.onTurn();
		
		for (Asteroid asteroid : asteroids)
			asteroid.onTurn();
		
		for (NonPlayer nonPlayer : nonPlayers)
			nonPlayer.onTurn();
	}
	
	public void listAllSettlers() {
		String ret = "";
		
		for (Settler settler : settlers)
			ret += settler.genUIString();
		
		ui.displayMessage(ret);
	}
	
	public void initGame(Boolean isManual) {
		if (isManual)
			return;
		
		Random rnd = new Random();
		
		int amountOfSuns = rnd.nextInt(10) + 10;
		int amountOfAsteroidsPerSun = rnd.nextInt(30) + 10;
		
		int amountOfSettlers = 10;
		int amountOfAliens = 30;
		
		for (int i = 0; i < amountOfSuns; i++) {
			Sun s = new Sun();
			
			addSun(s);
			
			for (int j = 0; j < amountOfAsteroidsPerSun; j++) {
				Asteroid a = new Asteroid();
				a.initialize();
				
				s.addAsteroid(a);
				
				addAsteroid(a);
			}
		}
		
		int numOfAsteroids = amountOfSuns * amountOfAsteroidsPerSun;
		int asteroidIndex = rnd.nextInt(numOfAsteroids);
		Asteroid startAsteroid = asteroids.get(asteroidIndex);
		
		for (int i = 0; i < amountOfSettlers; i++)
		{
			Settler s = new Settler();
			
			startAsteroid.addSettler(s);
		}
		
		for (int i = 0; i < amountOfAliens; i++)
		{
			Alien a = new Alien();
			
			asteroids.get(rnd.nextInt(numOfAsteroids)).addNonPlayer(a);
		}
		
		startGame();
	}
	
	public void startGame() {
		startTurn();
	}
	
	public void loadGame(String fileName) {
		List<StarGate> loadStarGates = new ArrayList<StarGate>();
		
		String loadString;
		
		try {
			File loadFile = new File(fileName);
			Scanner loadScanner = new Scanner(loadFile);
			
			while (loadScanner.hasNextLine())
			{
				loadString = loadScanner.nextLine();
				
				switch (loadString)
				{
					case "Sun:":
						Sun s = new Sun();
						
						loadString = loadScanner.nextLine();
						
						s.setId(loadString.split(" ")[1]);
						
						loadString = loadScanner.nextLine();
						
						if (loadString.split(" ")[1] == "t")
							s.setIsRandom(true);
						else
							s.setIsRandom(false);
						
						loadString = loadScanner.nextLine();
						
						while (loadString != "----------------------------------------------------")
						{
							if (loadString == "asteroids:")
							{
								Asteroid a = new Asteroid();
								
								loadString = loadScanner.nextLine();
								
								a.setId(loadString.split(" ")[1]);
								
								s.addAsteroid(a);
								
								addAsteroid(a);
							}
							
							loadString = loadScanner.nextLine();
						}
						
						addSun(s);
						
						break;
					case "Asteroid:":
						Asteroid a = new Asteroid();
						
						loadString = loadScanner.nextLine();
						
						a.setId(loadString.split(" ")[1]);
						
						loadString = loadScanner.nextLine();
						
						a.setRockThickness(Integer.parseInt(loadString.split(" ")[1]));
						
						loadString = loadScanner.nextLine();
						
						if (loadString.split(" ")[1] == "t")
							a.setCloseToSun(true);
						else
							a.setCloseToSun(false);
						
						loadString = loadScanner.nextLine();
						
						if (loadString.split(" ")[1] == "t")
							a.setIsRandom(true);
						else
							a.setIsRandom(false);
						
						loadString = loadScanner.nextLine();
						
						a.setCapacity(Integer.parseInt(loadString.split(" ")[1]));
						
						loadString = loadScanner.nextLine();
						
						// neighbour ids
						while (loadString != "settlers:")
						{
							Asteroid n = asteroids.get(0);
							
							int i = 0;
							while (n.getId() != loadString)
							{
								i++;
								n = asteroids.get(i);
							}
							
							a.addNeighbour(n);
							
							loadString = loadScanner.nextLine();
						}
						
						loadString = loadScanner.nextLine();
						
						while (loadString != "nonPlayers:")
						{
							Settler settler = new Settler();
							
							settler.setId(loadString);
							settler.setAsteroid(a);
							
							a.addSettler(settler);
						
							loadString = loadScanner.nextLine();
						}
						
						loadString = loadScanner.nextLine();
						
						while (loadString != "materials:")
						{
							NonPlayer np;
							
							if (loadString.charAt(0) == 'a')
								np = new Alien();
							else
								np = new Robot();
							
							np.setId(loadString);
							np.setAsteroid(a);
							
							a.addNonPlayer(np);
							
							loadString = loadScanner.nextLine();
						}
						
						loadString = loadScanner.nextLine();
						
						while (loadString != "buildings:")
						{
							loadString = loadScanner.nextLine();
							
							Material m;
							
							switch (loadString.split(" ")[1]) {
								case "Coal":
									m = new Coal();
									break;
								case "Iron":
									m = new Iron();
									break;
								case "Uran":
									m = new Uran();
									break;
								case "Ice":
									m = new Ice();
									break;
							}
									
							loadString = loadScanner.nextLine();
									
							m.setExposedCounter(Integer.parseInt(loadString.split(" ")[1]));
							
							loadString = loadScanner.nextLine();
							
							if (loadString.split(" ")[1] == "t")
								m.setRadio(true);
							else
								m.setRadio(false);
							
							loadString = loadScanner.nextLine();
							
							if (loadString.split(" ")[1] == "t")
								m.setCanEvaporate(true);
							else
								m.setCanEvaporate(false);
							
							a.addMaterial(m);
							
							loadString = loadScanner.nextLine();
						}
						
						loadString = loadScanner.nextLine();
						
						while (loadString != "----------------------------------------------------")
						{
							switch (loadString.split(" ")[1]) {
							case "Base":
								Base b = new Base();
								
								loadString = loadScanner.nextLine();
								
								b.setId(loadString.split(" ")[1]);
								
								loadString = loadScanner.nextLine();
								
								b.setAsteroid(a);
								
								break;
							case "StarGate":
								loadString = loadScanner.nextLine();
								
								StarGate sg;
								Boolean foundStarGate = false;
								
								for (StarGate starGate : loadStarGates)
									if (starGate.getId() == loadString.split(" ")[1])
									{
										foundStarGate = true;
										sg = starGate;
									}
								
								if (!foundStarGate)
								{
									sg = new StarGate();
									loadStarGates.add(sg);
								}
								
								sg.setId(loadString.split(" ")[1]);
								
								loadString = loadScanner.nextLine();
								
								sg.setAsteroid(a);
								
								// neighbour ???
								
								loadString = loadScanner.nextLine();
								
								StarGate n;
								Boolean foundNeighbour = false;
								
								for (StarGate stargate : loadStarGates)
								{
									if (stargate.getId() == loadString.split(" ")[1])
									{
										n = stargate;
										foundNeighbour = true;
									}
								}
								
								if (!foundNeighbour)
								{
									n = new StarGate();
									n.setId(loadString.split(" ")[1]);
									loadStarGates.add(n);
								}
								
								sg.setNeighbour(n);
								
								loadString = loadScanner.nextLine();
								
								if (loadString.split(" ")[1] == "t")
									sg.setWorks(true);
								else
									sg.setWorks(false);
								
								loadString = loadScanner.nextLine();
								
								if (loadString.split(" ")[1] == "t")
									sg.setWasInSunFlare(true);
								else
									sg.setWasInSunFlare(false);
								
								loadString = loadScanner.nextLine();
								
								if (loadString.split(" ")[1] == "t")
									sg.setRandom(true);
								else
									sg.setRandom(false);
								
								loadString = loadScanner.nextLine();
								
								break;
							}
						}
						
						break;
					case "Settler:":
						Settler settler;// = new Settler();
						
						loadString = loadScanner.nextLine();
						
						for (Asteroid asteroid : asteroids)
						{
							for (Settler set : asteroid.getSettelrs())
							{
								if (set.getId() == loadString.split(" ")[1])
									settler = set;
							}
						}
						
						loadString = loadScanner.nextLine();
						
						if (loadString.split(" ")[1] == "t")
							settler.setHadAction(true);
						else
							settler.setHadAction(false);
						
						loadString = loadScanner.nextLine();
						
						// asteroid
						
						loadString = loadScanner.nextLine(); // inventiry
						loadString = loadScanner.nextLine(); // Inventiry
						loadString = loadScanner.nextLine(); // materials
						loadString = loadScanner.nextLine(); // Material:
						
						Inventory i = new Inventory();
						
						settler.setInventory(i);
						
						while (loadString != "stargates:")
						{
							loadString = loadScanner.nextLine();
							
							Material m;
							
							switch (loadString.split(" ")[1]) {
								case "Coal":
									m = new Coal();
									break;
								case "Iron":
									m = new Iron();
									break;
								case "Uran":
									m = new Uran();
									break;
								case "Ice":
									m = new Ice();
									break;
							}
									
							loadString = loadScanner.nextLine();
									
							m.setExposedCounter(Integer.parseInt(loadString.split(" ")[1]));
							
							loadString = loadScanner.nextLine();
							
							if (loadString.split(" ")[1] == "t")
								m.setRadio(true);
							else
								m.setRadio(false);
							
							loadString = loadScanner.nextLine();
							
							if (loadString.split(" ")[1] == "t")
								m.setCanEvaporate(true);
							else
								m.setCanEvaporate(false);
							
							i.addMaterial(m);
							
							loadString = loadScanner.nextLine();
						}
						
						loadString = loadScanner.nextLine();
						
						while (loadString != "----------------------------------------------------")
						{
							StarGate sg;
							Boolean foundStarGate = false;
							
							loadString = loadScanner.nextLine();
							
							for (StarGate starGate : loadStarGates)
								if (starGate.getId() == loadString.split(" ")[1])
								{
									foundStarGate = true;
									sg = starGate;
								}
							
							if (!foundStarGate)
							{
								sg = new StarGate();
								loadStarGates.add(sg);
							}
							
							sg.setId(loadString.split(" ")[1]);
							
							loadString = loadScanner.nextLine();
							
							// dosent have asteroid
							
							// neighbour ???
							
							loadString = loadScanner.nextLine();
							
							StarGate n;
							Boolean foundNeighbour = false;
							
							for (StarGate stargate : loadStarGates)
							{
								if (stargate.getId() == loadString.split(" ")[1])
								{
									n = stargate;
									foundNeighbour = true;
								}
							}
							
							if (!foundNeighbour)
							{
								n = new StarGate();
								n.setId(loadString.split(" ")[1]);
								loadStarGates.add(n);
							}
							
							sg.setNeighbour(n);
							
							loadString = loadScanner.nextLine();
							
							if (loadString.split(" ")[1] == "t")
								sg.setWorks(true);
							else
								sg.setWorks(false);
							
							loadString = loadScanner.nextLine();
							
							if (loadString.split(" ")[1] == "t")
								sg.setWasInSunFlare(true);
							else
								sg.setWasInSunFlare(false);
							
							loadString = loadScanner.nextLine();
							
							if (loadString.split(" ")[1] == "t")
								sg.setRandom(true);
							else
								sg.setRandom(false);
							
							loadString = loadScanner.nextLine();
						}
	
						break;
					case "NonPlayer:":
						loadString = loadScanner.nextLine();
						
						switch (loadString.split(" ")[1]) {
							case "Alien":
								Alien ali;
								
								loadString = loadScanner.nextLine();
								
								for (Asteroid asteroid : asteroids)
								{
									for (NonPlayer nonPlayer : asteroid.getNonPlayers())
									{
										if (nonPlayer.getId() == loadString.split(" ")[1])
										{
											ali = nonPlayer;
										}
									}
								}
								
								loadString = loadScanner.nextLine(); // asteroid
								
								loadString = loadScanner.nextLine(); // inventory????
								loadString = loadScanner.nextLine(); // Inventory:
								loadString = loadScanner.nextLine(); // materials
								loadString = loadScanner.nextLine(); // Material:
								
								Inventory inv = new Inventory();
								
								ali.addInventory(inv);
								
								while (loadString != "stargates:")
								{
									loadString = loadScanner.nextLine();
									
									Material m;
									
									switch (loadString.split(" ")[1]) {
										case "Coal":
											m = new Coal();
											break;
										case "Iron":
											m = new Iron();
											break;
										case "Uran":
											m = new Uran();
											break;
										case "Ice":
											m = new Ice();
											break;
									}
											
									loadString = loadScanner.nextLine();
											
									m.setExposedCounter(Integer.parseInt(loadString.split(" ")[1]));
									
									loadString = loadScanner.nextLine();
									
									if (loadString.split(" ")[1] == "t")
										m.setRadio(true);
									else
										m.setRadio(false);
									
									loadString = loadScanner.nextLine();
									
									if (loadString.split(" ")[1] == "t")
										m.setCanEvaporate(true);
									else
										m.setCanEvaporate(false);
									
									inv.addMaterial(m);
									
									loadString = loadScanner.nextLine();
								}
								
								loadString = loadScanner.nextLine(); // stargates
								
								while (loadString != "----------------------------------------------------")
								{
									// stargates 
									// NOT needed here cos alien dont have settlers
								}
								
								break;
							case "Robot":
								Robot r;
								
								loadString = loadScanner.nextLine();
								
								for (Asteroid asteroid : asteroids)
								{
									for (NonPlayer nonPlayer : asteroid.getNonPlayers())
									{
										if (nonPlayer.getId() == loadString.split(" ")[1])
										{
											r = nonPlayer;
										}
									}
								}
								
								loadString = loadScanner.nextLine(); // asteroid
								
								break;
						}
	
						break;
				}
			}
			
			loadScanner.close();
		} 
		catch (FileNotFoundException e) {
			System.out.println("Can't load game.");
		}

	}
	
	public void saveGame(String fileName) {
		String saveString = "";
		
		for (Sun sun : suns)
			saveString += "Sun:\n" + sun.genUIString() + "\n----------------------------------------------------";
		
		for (Asteroid asteroid : asteroids)
			saveString += "Asteroids:\n" + asteroid.genUIString() + "\n----------------------------------------------------";;
		
		for (Settler settler : settlers)
			saveString += "Settlers:\n" + settler.genUIString() + "\n----------------------------------------------------";;
		
		for (NonPlayer nonPlayer : nonPlayers)
			saveString += "NonPlayer:\n" + nonPlayer.genUIString() + "\n----------------------------------------------------";;
		
		try {
			FileWriter saveWriter = new FileWriter(fileName);
			saveWriter.write(saveString);
			saveWriter.close();
		} 
		catch (IOException e) {
		    System.out.println("Can't save game.");
		}
	}
	
	public Settler getSettlerWithId(String id) {
		for (Settler settler : settlers)
			if (settler.getId() == id)
				return settler;
		
		ui.displayMessage("No such settler found");
		return null;
	}
	
	public Asteroid getAsteroidWithId(String id) {
		for (Asteroid asteroid : asteroids)
			if (asteroid.getId() == id)
				return asteroid;
		
		ui.displayMessage("No such asteroid found");
		return null;
	}
	
	public Sun getSunWithId(String id) {
		for (Sun sun : suns)
			if (sun.getId() == id)
				return sun;
		
		ui.displayMessage("No such sun found");
		return null;
	}
	
	public Alien getAlienWithId(String id) {
		for (NonPlayer nonPlayer : nonPlayers)
			if (nonPlayer.getId() == id)
				return nonPlayer;
		
		ui.displayMessage("No such alien found");
		return null;
	}
	
	public Robot getRobotWithId(String id) {
		for (NonPlayer nonPlayer : nonPlayers)
			if (nonPlayer.getId() == id)
				return nonPlayer;
		
		ui.displayMessage("No such robot found");
		return null;
	}
	
	public StarGate getStarGateWithId(String id) {
		for (Settler settler : settlers) {
			for (StarGate starGate : settler.getInventory().getStarGates())
				if (starGate.getId() == id)
					return starGate;
		}
		
		for (Asteroid asteroid : asteroids) {
			for (Building starGate : asteroid.getBuildings())
				if (starGate.getId() == id)
					return (StarGate)starGate;
		}
		
		ui.displayMessage("No such stargate found");
		return null;
	}
	
	public Base getBaseWithId(String id) {
		for (Asteroid asteroid : asteroids) {
			for (Building base : asteroid.getBuildings())
				if (base.getId() == id)
					return (Base)base;
		}
		
		ui.displayMessage("No such base found");
		return null;
	}
	
	public Material getMaterialWithId(String id) {
		for (Settler settler : settlers) {
			for (Material material : settler.getInventory().getMaterials())
				if (material.getId() == id)
					return material;
		}
		
		for (Asteroid asteroid : asteroids) {
			for (Material material : asteroid.getMaterials())
				if (material.getId() == id)
					return material;
		}
		
		ui.displayMessage("No such material found");
		return null;
	}
}
