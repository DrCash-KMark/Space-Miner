package main;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileNotFoundException;
import java.util.Scanner;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Space-Miner
//  @ File Name : Game.java
//  @ Date : 17/03/2021
//  @ Author : Simon Zoltán
//
//



/**
 * Represents an instance of the running game. Hold reference to all the present Settlers, Robots and Planets in the game.
 * @author Simon
 *
 */
public class Game {
	private UI ui;
	
	//Lists of objects present in game:
	private List<Settler> settlers = new ArrayList<Settler>();
	//private List<Controllable> controllables = new ArrayList<Controllable>();

	// maybe?
	private List<Sun> suns = new ArrayList<Sun>();
	private List<Asteroid> asteroids = new ArrayList<Asteroid>();
	private List<NonPlayer> nonPlayers = new ArrayList<NonPlayer>();
	
	//Lists of objects scheduled to destroy:
	private List<Settler> settlersToRemove = new ArrayList<Settler>();
	//private List<Controllable> controllablesToRemove = new ArrayList<Controllable>();
	
	private List<Sun> sunsToRemove = new ArrayList<Sun>();
	private List<Asteroid> asteroidsToRemove = new ArrayList<Asteroid>();
	private List<NonPlayer> nonPlayersToRemove = new ArrayList<NonPlayer>();
	
	//Event related:-----------------------------------------------------------------
	
	/**
	 * For testing only!
	 * Removes reference to objects, if they called destroyMe or killMe.
	 */
	public void cleanup () {
		for (Settler settler : settlersToRemove) {
			settlers.remove(settler);
		}
		
		/*for (Controllable controllable : controllablesToRemove) {
			controllables.remove(controllable);
		}*/
		
		for (Sun sun : sunsToRemove) {
			suns.remove(sun);
		}
		
		for (Asteroid asteroid : asteroidsToRemove) {
			asteroids.remove(asteroid);
		}
		
		for (NonPlayer nonPlayer : nonPlayersToRemove) {
			nonPlayers.remove(nonPlayer);
		}
	}

	/**
	 * Adds Settler to Game.
	 * @param settler Settler to be added.
	 */
	public void addSettler(Settler settler) {
		settlers.add(settler);
	}
	
	/*public void addControllable(Controllable controllable) {
		controllables.add(controllable);
	}*/
	
	public void addSun(Sun sun) {
		suns.add(sun);
	}
	
	public void addAsteroid(Asteroid asteroid) {
		asteroids.add(asteroid);
	}
	
	public void addNonPlayer(NonPlayer nonPlayer) {
		nonPlayers.add(nonPlayer);
	}
	
	public void removeSettler(Settler settler) {
		settlersToRemove.add(settler);
	}
	
	/*public void removeControllable(Controllable controllable) {
		controllablesToRemove.add(controllable);
	}*/
	
	public void removeSun(Sun sun) {
		sunsToRemove.add(sun);
	}
	
	public void removeAsteroid(Asteroid asteroid) {
		asteroidsToRemove.add(asteroid);
	}
	
	public void removeNonPlayer(NonPlayer nonPlayer) {
		nonPlayersToRemove.add(nonPlayer);
	}
	
	/**
	 * Called, when conditions of victory are met.
	 * Finishes the game.
	 */
	public void gameWon() {
		ui.displayMessage("The game is won!");
	}
	
	public Boolean isGameLost() {
		cleanup();
		
		if (settlers.size() == 0)
			return true;
		
		return true;
	}
	
	public void gameLost() {
		for (Settler settler : settlers)
			settlersToRemove.add(settler);
		
		/*for (Controllable controllable : controllables)
			controllablesToRemove.add(controllable);*/
		
		for (Sun sun : suns)
			sunsToRemove.add(sun);
		
		for (Asteroid asteroid : asteroids)
			asteroidsToRemove.add(asteroid);
		
		for (NonPlayer nonPlayer : nonPlayers)
			nonPlayersToRemove.add(nonPlayer);
		
		cleanup();
		
		ui.displayMessage("The game is lost!");
	}
	
	public void startTurn() {
		cleanup();
		
		for (Sun sun : suns)
			sun.onTurn();
		
		for (Asteroid asteroid : asteroids)
			asteroid.onTurn();
		
		for (NonPlayer nonPlayer : nonPlayers)
			nonPlayer.onTurn();
	}
	
	public void listAllSettlers() {
		String ret = "";
		
		for (Settler settler : settlers)
			ret += settler.genUIString();
		
		ui.displayMessage(ret);
	}
	
	public void initGame(Boolean isManual) {
		if (isManual)
			return;
		
		Random rnd = new Random();
		
		int amountOfSuns = rnd.nextInt(10) + 10;
		int amountOfAsteroidsPerSun = rnd.nextInt(30) + 10;
		
		int amountOfSettlers = 10;
		int amountOfAliens = 30;
		
		for (int i = 0; i < amountOfSuns; i++) {
			Sun s = new Sun();
			
			addSun(s);
			
			for (int j = 0; j < amountOfAsteroidsPerSun; j++) {
				Asteroid a = new Asteroid();
				a.initialize();
				
				s.addAsteroid(a);
				
				addAsteroid(a);
			}
		}
		
		int numOfAsteroids = amountOfSuns * amountOfAsteroidsPerSun;
		int asteroidIndex = rnd.nextInt(numOfAsteroids);
		Asteroid startAsteroid = asteroids.get(asteroidIndex);
		
		for (int i = 0; i < amountOfSettlers; i++)
		{
			Settler s = new Settler();
			
			startAsteroid.addSettler(s);
		}
		
		for (int i = 0; i < amountOfAliens; i++)
		{
			Alien a = new Alien();
			
			asteroids.get(rnd.nextInt(numOfAsteroids)).addNonPlayer(a);
		}
		
		startGame();
	}
	
	public void startGame() {
		startTurn();
	}
	
	public void loadGame(String fileName) {
		List<StarGate> loadStarGates = new ArrayList<StarGate>();
		
		String loadString;
		
		try {
			File loadFile = new File(fileName);
			Scanner loadScanner = new Scanner(loadFile);
			
			while (loadScanner.hasNextLine())
			{
				loadString = loadScanner.nextLine();
				
				switch (loadString) {
					case "Sun":
						
						break;
					case "Asteroid":
						break;
					case "Material":
						break;
					case "Building":
						break;
					case "Settler":
						break;
					case "Inventory":
						break;
					case "NonPlayer":
						break;
				}
			}
			
			loadScanner.close();
		} 
		catch (FileNotFoundException e) {
			System.out.println("Can't load game.");
		}
	}
	
	public void saveGame(String fileName) {
		String saveString = "";
		
		for (Sun sun : suns) {
			saveString += "Sun:\n" + sun.genSaveString() + "\n----------------------------------------------------\n";
			
			for (Asteroid asteroid : sun.getAsteroids()) {
				saveString += "Asteroid:\n" + asteroid.genSaveString() + "\n----------------------------------------------------\n";
				
				for (Material material : asteroid.getMaterials()) {
					saveString += "Material:\n" + material.genUIString() + "\n----------------------------------------------------\n";
				}
				
				for (Building building : asteroid.getBuildings()) {
					saveString += "Building:\n" + building.genSaveString() + "\n----------------------------------------------------\n";
				}
				
				for (Settler settler : asteroid.getSettelrs()) {
					saveString += "Settler:\n" + settler.genSaveString() + "\n----------------------------------------------------\n";
					
					saveString += "Inventory:\n" + settler.getInventory().genSaveString() + "\n----------------------------------------------------\n";
					
					for (Material material : settler.getInventory().getMaterials()) {
						saveString += "Material:\n" + material.genSaveString() + "\n----------------------------------------------------\n";
					}
					
					for (StarGate stargate : settler.getInventory().getStarGates()) {
						saveString += "Building:\n" + stargate.genSaveString() + "\n----------------------------------------------------\n";
					}
				}
				
				for (NonPlayer nonPlayer : asteroid.getNonPlayers()) {
					saveString += "NonPlayer:" + nonPlayer.genSaveString() + "\n----------------------------------------------------\n";
					
					if (((Alien)nonPlayer).getInventory() != null) {
						for (Material material : ((Alien)nonPlayer).getInventory().getMaterials()) {
							saveString += "Material:\n" + material.genSaveString() + "\n----------------------------------------------------\n";
						}
					}
						
				}
			}
		}
		
		try {
			FileWriter saveWriter = new FileWriter(fileName);
			saveWriter.write(saveString);
			saveWriter.close();
		} 
		catch (IOException e) {
		    System.out.println("Can't save game.");
		}
	}
	
	public Settler getSettlerWithId(String id) {
		for (Settler settler : settlers)
			if (settler.getId() == id)
				return settler;
		
		ui.displayMessage("No such settler found");
		return null;
	}
	
	public Asteroid getAsteroidWithId(String id) {
		for (Asteroid asteroid : asteroids)
			if (asteroid.getId() == id)
				return asteroid;
		
		ui.displayMessage("No such asteroid found");
		return null;
	}
	
	public Sun getSunWithId(String id) {
		for (Sun sun : suns)
			if (sun.getId() == id)
				return sun;
		
		ui.displayMessage("No such sun found");
		return null;
	}
	
	public Alien getAlienWithId(String id) {
		for (NonPlayer nonPlayer : nonPlayers)
			if (nonPlayer.getId() == id)
				return (Alien)nonPlayer;
		
		ui.displayMessage("No such alien found");
		return null;
	}
	
	public Robot getRobotWithId(String id) {
		for (NonPlayer nonPlayer : nonPlayers)
			if (nonPlayer.getId() == id)
				return (Robot)nonPlayer;
		
		ui.displayMessage("No such robot found");
		return null;
	}
	
	public StarGate getStarGateWithId(String id) {
		for (Settler settler : settlers) {
			for (StarGate starGate : settler.getInventory().getStarGates())
				if (starGate.getId() == id)
					return starGate;
		}
		
		for (Asteroid asteroid : asteroids) {
			for (Building starGate : asteroid.getBuildings())
				if (starGate.getId() == id)
					return (StarGate)starGate;
		}
		
		ui.displayMessage("No such stargate found");
		return null;
	}
	
	public Base getBaseWithId(String id) {
		for (Asteroid asteroid : asteroids) {
			for (Building base : asteroid.getBuildings())
				if (base.getId() == id)
					return (Base)base;
		}
		
		ui.displayMessage("No such base found");
		return null;
	}
	
	public Material getMaterialWithId(String id) {
		for (Settler settler : settlers) {
			for (Material material : settler.getInventory().getMaterials())
				if (material.getId() == id)
					return material;
		}
		
		for (Asteroid asteroid : asteroids) {
			for (Material material : asteroid.getMaterials())
				if (material.getId() == id)
					return material;
		}
		
		ui.displayMessage("No such material found");
		return null;
	}
	
	public Inventory getInventoryWithId(String id) {
		for (Settler settler : settlers) {
			if (settler.getInventory().getId() == id)
				return settler.getInventory();
		}
		
		for (NonPlayer nonPlayer : nonPlayers) {
			if (((Alien)nonPlayer).getInventory().getId() == id)
				return ((Alien)nonPlayer).getInventory();
		}
		
		ui.displayMessage("No such inventory found");
		return null;
	}
}
