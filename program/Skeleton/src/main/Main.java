package main;

import java.util.Scanner;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Space-Miner
//  @ File Name : Main.java
//  @ Date : 17/03/2021
//  @ Author : 
//
//



/**
 * Main class. Responsible for executing the skeleton use cases.
 */
public class Main {
	
	private int tabulation;
	private int menuState;
	
	private Scanner scan;
	
	/**
	 * function for logging the functions executed by individual objects
	 * @param isReturn: boolean: this boolean marks if this is a "forward" or return call
	 * @param obj: String: this string holds the name of the object that calls this function
	 * @param cls: String: this string holds the name of the class that calls this function
	 * @param fnc: String: this string holds the function call in a string
	 */
	public void log(boolean isReturn, String obj, String cls, String fnc)
	{
		if (!isReturn)
		{
			for (int i = 0; i < tabulation; i++)
				System.out.print("\t|");
			
			System.out.print("->" + obj + ":" + cls + "." + fnc + "\n");
			
			tabulation++;
		}
		else
		{
			tabulation--;
			
			for (int i = 0; i < tabulation; i++)
				System.out.print("\t|");
			
			System.out.print("<-" + obj + ":" + cls + "\n");
		}
	}
	
	/**
	 * constructor without parameters
	 */
	public Main() {
		tabulation = 0;
		menuState = 0;
		scan = new Scanner(System.in);
	}
	
	public static void main(String[] args) {
		
		Main m = new Main();
		
    	m.printMenu();
	}
    
	/**
	 * this function reads an int from the standard input
	 * @return num: int: returns the number read from the standard input
	 */
    public int scanNumber()
    {
    	//Scanner scan = new Scanner(System.in);

        int num = scan.nextInt();

        //scan.close();
        
        return num;
    }
    
    /**
	 * this function prints the main and its sub menus onto the standard output
	 */
    public void printMenu()
    {
    	int num;
    	
    	System.out.println("Aszteroida banyaszat");
    	
    	switch(menuState) {
    		case 0:
    			System.out.println();
    			System.out.println("0 Kilepes");
    			System.out.println("1 Banyaszas");
    			System.out.println("2 Visszahelyezes");
    			System.out.println("3 Napkitores");
    			System.out.println("4 Furas");
    			System.out.println("5 Mozgas");
    			System.out.println("6 Teleportkapu lehelyezese");
    			System.out.println("7 Epites");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 8)
    				num = scanNumber();
    	        
    	        if (num > 0)
    	        {
    	        	menuState = num;
    	        	printMenu();
    	        }
    	        else
    	        {
    	        	scan.close();
    	        	System.exit(0);
    	        }
    	        
    			break;
    		case 1:
    			System.out.println("Banyaszas");
    			System.out.println();
    			System.out.println("0 Vissza a fomenube");
    			System.out.println("1 Vas banyaszasa");
    			System.out.println("2 Uran banyaszasa");
    			System.out.println("3 Szen banyaszasa");
    			System.out.println("4 Vizjeg banyaszasa");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 4)
    				num = scanNumber();
    			
    	        switch (num)
    	        {
    				case 0:
    					menuState = num;
    					printMenu();
    					break;
    				case 1:
    					vas_banyaszasa();
    					
    					printMenu();
    					break;
    				case 2:
    					uran_banyaszasa();
    					
    					printMenu();
    					break;
    				case 3:
    					szen_banyaszasa();
    					
    					printMenu();
    					break;
    				case 4:
    					vizjeg_banyaszasa();
    					
    					printMenu();
    					break;
    	        }
    			
    			break;
    		case 2:
    			System.out.println("Visszahelyezes");
    			System.out.println();
    			System.out.println("0 Vissza a fomenube");
    			System.out.println("1 Vas visszahelyezese");
    			System.out.println("2 Uran visszahelyezese");
    			System.out.println("3 Szen visszahelyezese");
    			System.out.println("4 Vizjeg visszahelyezese");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 4)
    				num = scanNumber();
    	        
    	        switch (num)
    	        {
    				case 0:
    					menuState = num;
    					printMenu();
    					break;
    				case 1:
    					vas_visszahelyezese();
    					
    					printMenu();
    					break;
    				case 2:
    					uran_visszahelyezese();
    					
    					printMenu();
    					break;
    				case 3:
    					szen_visszahelyezese();
    					
    					printMenu();
    					break;
    				case 4:
    					vizjeg_visszahelyezese();
    					
    					printMenu();
    					break;
    	        }
    			
    			break;
    		case 3:
    			System.out.println("Napkitores");
    			System.out.println();
    			System.out.println("0 Vissza a fomenube");
    			System.out.println("1 Napvihar tortenik");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 1)
    				num = scanNumber();
    	        
    	        switch (num)
    	        {
    				case 0:
    					menuState = num;
    					printMenu();
    					break;
    				case 1:
    					napvihar_tortenik();
    					
    					printMenu();
    					break;
    	        }
    			
    			break;
    		case 4:
    			System.out.println("Furas");
    			System.out.println();
    			System.out.println("0 Vissza a fomenube");
    			System.out.println("1 Furas robottal, elaprolog");
    			System.out.println("2 Furas telepessel, elparolog");
    			System.out.println("3 Furas robottal, robban, van szomszed");
    			System.out.println("4 Furas robottal, robban, nincs szomszed");
    			System.out.println("5 Furas telepessel, robban");
    			System.out.println("6 Furas robottal");
    			System.out.println("7 Furas telepessel");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 7)
    				num = scanNumber();
    	        
    	        switch (num)
    	        {
    				case 0:
    					menuState = num;
    					printMenu();
    					break;
    				case 1:
    					furas_robottal_elparolog();
    					
    					printMenu();
    					break;
    				case 2:
    					furas_telepessel_elparolog();
    					
    					printMenu();
    					break;
    				case 3:
    					furas_robottal_robban_van_szomszed();
    					
    					printMenu();
    					break;
    				case 4:
    					furas_robottal_robban_nincs_szomszed();
    					
    					printMenu();
    					break;
    				case 5:
    					furas_telepessel_robban();
    					
    					printMenu();
    					break;
    				case 6:
    					furas_robottal();
    					
    					printMenu();
    					break;
    				case 7:
    					furas_telepessel();
    					
    					printMenu();
    					break;
    	        }
    			
    			break;
    		case 5:
    			System.out.println("Mozgas");
    			System.out.println();
    			System.out.println("0 Vissza a fomenube");
    			System.out.println("1 Mozgas robottal");
    			System.out.println("2 Mozgas telepessel");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 2)
    				num = scanNumber();
    	        
    	        switch (num)
    	        {
    				case 0:
    					menuState = num;
    					printMenu();
    					break;
    				case 1:
    					mozgas_robottal();
    					
    					printMenu();
    					break;
    				case 2:
    					mozgas_telepessel();
    					
    					printMenu();
    					break;
    	        }
    			
    			break;
    		case 6:
    			System.out.println("Teleportkapu lehelyezese");
    			System.out.println();
    			System.out.println("0 Vissza a fomenube");
    			System.out.println("1 Teleportkapu lehelyezese, par egy masik aszteroidan");
    			System.out.println("2 Teleportkapu lehelyezese, par a telepes inventory-jában");
    			System.out.println("3 Teleportkapu lehelyezese, par mar elpusztult");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 3)
    				num = scanNumber();
    	        
    	        switch (num)
    	        {
    				case 0:
    					menuState = num;
    					printMenu();
    					break;
    				case 1:
    					teleportkapu_lehelyezese_par_egy_masik_aszteroidan();
    					
    					printMenu();
    					break;
    				case 2:
    					teleportkapu_lehelyezese_par_a_telepes_inventoryjaban();
    					
    					printMenu();
    					break;
    				case 3:
    					teleportkapu_lehelyezese_par_mar_elpusztult();
    					
    					printMenu();
    					break;
    	        }
    			
    			break;
    		case 7:
    			System.out.println("Epites");
    			System.out.println();
    			System.out.println("0 Vissza a fomenube");
    			System.out.println("1 Teleportkapu epitese");
    			System.out.println("2 Bazis epitese");
    			System.out.println("3 Robot epitese");
    			System.out.print("Kerem a parancs azonositojat: ");
    			
    			num = scanNumber();
    			
    			while (num < 0 && num > 3)
    				num = scanNumber();
    	        
    	        switch (num)
    	        {
    				case 0:
    					menuState = num;
    					printMenu();
    					break;
    				case 1:
    					teleportkapu_epitese();
    					
    					printMenu();
    					break;
    				case 2:
    					bazis_epitese();
    					
    					printMenu();
    					break;
    				case 3:
    					robot_epitese();
    					
    					printMenu();
    					break;
    	        }
    			
    			break;
    	}
    }
    
    /**
     * This function sets up everything for the vas_banyaszasa sequence and then executes it.
	 */
    public void vas_banyaszasa() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Vas banyaszasa");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Iron iron = new Iron();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	iron.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	iron.setName("iron");
    	
    	asteroid.addEntity(settler);
    	asteroid.setMaterial(iron);
    	
    	settler.setInventory(inventory);
    	settler.setAsteroid(asteroid);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.mine();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the szen_banyaszasa sequence and then executes it.
	 */
    public void szen_banyaszasa() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Szen banyaszasa");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Coal coal = new Coal();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	coal.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	coal.setName("coal");
    	
    	asteroid.addEntity(settler);
    	asteroid.setMaterial(coal);
    	
    	settler.setInventory(inventory);
    	settler.setAsteroid(asteroid);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.mine();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }

    /**
     * This function sets up everything for the vizjeg_banyaszasa sequence and then executes it.
	 */
    public void vizjeg_banyaszasa() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Vizjeg banyaszasa");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Ice ice = new Ice();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	ice.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	ice.setName("ice");
    	
    	asteroid.addEntity(settler);
    	asteroid.setMaterial(ice);
    	
    	settler.setInventory(inventory);
    	settler.setAsteroid(asteroid);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.mine();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }

    /**
     * This function sets up everything for the uran_banyaszasa sequence and then executes it.
	 */
    public void uran_banyaszasa() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Uran banyaszasa");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Uran uran = new Uran();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	uran.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	uran.setName("uran");
    	
    	asteroid.addEntity(settler);
    	asteroid.setMaterial(uran);
    	
    	settler.setInventory(inventory);
    	settler.setAsteroid(asteroid);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.mine();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the vas_visszahelyezese sequence and then executes it.
	 */
    public void vas_visszahelyezese() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Vas visszahelyezese");
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Iron iron = new Iron();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	iron.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	iron.setName("iron");
    	
    	asteroid.addEntity(settler);
    	
    	settler.setAsteroid(asteroid);
    	settler.setInventory(inventory);
    	
    	inventory.addInventory(iron);
    	
    	asteroid.setCloseToSun(isClose);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.dropMaterial(iron);
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }

    /**
     * This function sets up everything for the szen_visszahelyezese sequence and then executes it.
	 */
    public void szen_visszahelyezese() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Szen visszahelyezese");
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Coal coal = new Coal();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	coal.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	coal.setName("coal");
    	
    	asteroid.addEntity(settler);
    	
    	settler.setAsteroid(asteroid);
    	settler.setInventory(inventory);
    	
    	inventory.addInventory(coal);
    	
    	asteroid.setCloseToSun(isClose);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.dropMaterial(coal);
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }

    /**
     * This function sets up everything for the vizjeg_visszahelyezese sequence and then executes it.
	 */
    public void vizjeg_visszahelyezese() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Vizjeg visszahelyezese");
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Ice ice = new Ice();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	ice.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	ice.setName("ice");
    	
    	asteroid.addEntity(settler);
    	
    	settler.setAsteroid(asteroid);
    	settler.setInventory(inventory);
    	
    	inventory.addInventory(ice);
    	
    	asteroid.setCloseToSun(isClose);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.dropMaterial(ice);
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }

    /**
     * This function sets up everything for the uran_visszahelyezese sequence and then executes it.
	 */
    public void uran_visszahelyezese() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Uran visszahelyezese");
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Uran uran = new Uran();
    	Asteroid neighbour = new Asteroid();
    	Game owner = new Game();
    	
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	uran.setMain(this);
    	neighbour.setMain(this);
    	owner.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	uran.setName("iron");
    	neighbour.setName("neighbour");
    	owner.setName("owner");
    	
    	asteroid.addEntity(settler);
    	
    	settler.setAsteroid(asteroid);
    	settler.setInventory(inventory);
    	
    	inventory.addInventory(uran);
    	
    	asteroid.addNeighbour(neighbour);
    	
    	neighbour.addNeighbour(asteroid);
    	
    	settler.setOwner(owner);
    	
    	asteroid.setOwner(owner);
    	
    	neighbour.setOwner(owner);
    	
    	owner.addSettler(settler);
    	owner.addPlanet(asteroid);
    	owner.addPlanet(neighbour);
    	
    	asteroid.setCloseToSun(isClose);
    	
    	asteroid.setRockThickness(thickness);
    	
    	settler.dropMaterial(uran);
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }

    /**
     * This function sets up everything for the napvihar_tortenik sequence and then executes it.
	 */
    public void napvihar_tortenik() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Napviher tortenik");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Lefutas:");
    	
    	Game owner = new Game();
    	Asteroid asteroid = new Asteroid();
    	Robot robot = new Robot();
    	Settler settler = new Settler();
    	Sun sun = new Sun();
    	
    	owner.setMain(this);
    	asteroid.setMain(this);
    	robot.setMain(this);
    	settler.setMain(this);
    	sun.setMain(this);
    	
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	robot.setName("robot");
    	owner.setName("owner");
    	sun.setName("sun");
    	
    	owner.addPlanet(sun);
    	
    	sun.setOwner(owner);
    	
    	asteroid.addEntity(settler);
    	asteroid.addEntity(robot);
    	
    	robot.setAsteroid(asteroid);
    	settler.setAsteroid(asteroid);
    	
    	owner.addPlanet(asteroid);
    	owner.addSettler(settler);
    	owner.addRobot(robot);
    	
    	asteroid.setOwner(owner);
    	
    	robot.setOwner(owner);
    	
    	settler.setOwner(owner);
    	
    	asteroid.setRockThickness(thickness);
    	
    	sun.sunFlare();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the furas_robottal_elparolog sequence and then executes it.
	 */
    public void furas_robottal_elparolog() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Furas robottal elparolog");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Robot robot = new Robot();
    	Asteroid asteroid = new Asteroid();
    	Ice ice = new Ice();
    	
    	robot.setMain(this);
    	asteroid.setMain(this);
    	ice.setMain(this);
    	
    	robot.setName("robot");
    	asteroid.setName("asteroid");
    	ice.setName("ice");
    	
    	robot.setAsteroid(asteroid);
    	
    	 
    	 
    	
    	asteroid.setMaterial(ice);
    	asteroid.addEntity(robot);
    	
    	asteroid.setRockThickness(thickness);
    	asteroid.setCloseToSun(isClose);
    	
    	robot.drill();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
   
    /**
     * This function sets up everything for the furas_telepessel_elparolog sequence and then executes it.
	 */
    public void furas_telepessel_elparolog() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Furas telepessel elparolog");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Settler settler = new Settler();
    	Asteroid asteroid = new Asteroid();
    	Ice ice = new Ice();
    	
    	settler.setMain(this);
    	asteroid.setMain(this);
    	ice.setMain(this);
    	
    	settler.setName("settler");
    	asteroid.setName("asteroid");
    	ice.setName("ice");
    	
    	settler.setAsteroid(asteroid);
    	
    	 
    	 
    	
    	asteroid.setMaterial(ice);
    	asteroid.addEntity(settler);
    	
    	asteroid.setRockThickness(thickness);
    	asteroid.setCloseToSun(isClose);
    	
    	settler.drill();
    	
    	System.out.println("0 Visszalepes");
    	
    	asteroid.setRockThickness(thickness);
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the furas_robottal_robban_van_szomszed sequence and then executes it.
	 */
    public void furas_robottal_robban_van_szomszed() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Furas robottal robban van szomszed");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Robot robot = new Robot();
    	Asteroid asteroid = new Asteroid();
    	Uran uran = new Uran();
    	Asteroid neighbour = new Asteroid();
    	Game owner = new Game();
    	
    	robot.setMain(this);
    	asteroid.setMain(this);
    	uran.setMain(this);
    	neighbour.setMain(this);
    	owner.setMain(this);
    	
    	robot.setName("robot");
    	asteroid.setName("asteroid");
    	uran.setName("uran");
    	neighbour.setName("neighbour");
    	owner.setName("owner");
    	
    	robot.setAsteroid(asteroid);
    	
    	 
    	 
    	
    	asteroid.addEntity(robot);
    	asteroid.setMaterial(uran);
    	asteroid.addNeighbour(neighbour);
    	
    	neighbour.addNeighbour(asteroid);
    	
    	robot.setOwner(owner);
    	
    	asteroid.setOwner(owner);
    	
    	neighbour.setOwner(owner);
    	
    	owner.addRobot(robot);
    	owner.addPlanet(asteroid);
    	owner.addPlanet(neighbour);
    	
    	asteroid.setRockThickness(thickness);
    	asteroid.setCloseToSun(isClose);
    	
    	robot.drill();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the furas_robottal_robban_nincs_szomszed sequence and then executes it.
	 */
    public void furas_robottal_robban_nincs_szomszed() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Furas robottal nincs szomszed");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Robot robot = new Robot();
    	Asteroid asteroid = new Asteroid();
    	Uran uran = new Uran();
    	Game owner = new Game();
    	
    	robot.setMain(this);
    	asteroid.setMain(this);
    	uran.setMain(this);
    	owner.setMain(this);
    	
    	robot.setName("robot");
    	asteroid.setName("asteroid");
    	uran.setName("uran");
    	owner.setName("owner");
    	
    	robot.setAsteroid(asteroid);
    	
    	 
    	 
    	
    	asteroid.addEntity(robot);
    	asteroid.setMaterial(uran);
    	
    	robot.setOwner(owner);
    	
    	asteroid.setOwner(owner);
    	
    	owner.addRobot(robot);
    	owner.addPlanet(asteroid);
    	
    	asteroid.setRockThickness(thickness);
    	asteroid.setCloseToSun(isClose);
    	
    	robot.drill();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the furas_telepessel_robban sequence and then executes it.
	 */
    public void furas_telepessel_robban() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Furas telepssel robban");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Settler settler = new Settler();
    	Asteroid asteroid = new Asteroid();
    	Uran uran = new Uran();
    	Asteroid neighbour = new Asteroid();
    	Game owner = new Game();
    	
    	settler.setMain(this);
    	asteroid.setMain(this);
    	uran.setMain(this);
    	neighbour.setMain(this);
    	owner.setMain(this);
    	
    	settler.setName("settler");
    	asteroid.setName("asteroid");
    	uran.setName("uran");
    	neighbour.setName("neighbour");
    	owner.setName("owner");
    	
    	settler.setAsteroid(asteroid);
    	
    	 
    	 
    	
    	asteroid.addEntity(settler);
    	asteroid.setMaterial(uran);
    	asteroid.addNeighbour(neighbour);
    	
    	neighbour.addNeighbour(asteroid);
    	
    	settler.setOwner(owner);
    	
    	asteroid.setOwner(owner);
    	
    	neighbour.setOwner(owner);
    	
    	owner.addSettler(settler);
    	owner.addPlanet(asteroid);
    	owner.addPlanet(neighbour);
    	
    	asteroid.setRockThickness(thickness);
    	asteroid.setCloseToSun(isClose);
    	
    	settler.drill();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the furas_robottal sequence and then executes it.
	 */
    public void furas_robottal() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Furas robottal");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	boolean isClose = false;
    	
    	if (iIsClose == 1) isClose = true;
    	
    	System.out.println("Lefutas:");
    	
    	Robot robot = new Robot();
    	Asteroid asteroid = new Asteroid();
    	Coal coal = new Coal();
    	
    	robot.setMain(this);
    	asteroid.setMain(this);
    	coal.setMain(this);
    	
    	robot.setName("robot");
    	asteroid.setName("asteroid");
    	coal.setName("coal");
    	
    	robot.setAsteroid(asteroid);
    	
    	 
    	 
    	
    	asteroid.setMaterial(coal);
    	asteroid.addEntity(robot);
    	
    	asteroid.setRockThickness(thickness);
    	asteroid.setCloseToSun(isClose);
    	
    	robot.drill();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the furas_telepessel sequence and then executes it.
	 */
    public void furas_telepessel() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Furas telepessel");
    	
    	System.out.println("Milyen vastag az aszteroida kerge:");
    	int thickness = scanNumber();
    	
    	System.out.println("Kozel van a naphoz az aszteroida (0: nem, 1: igen):");
    	int iIsClose = scanNumber();
    	
    	boolean isClose = false;
    	
    	System.out.println("Lefutas:");
    	
    	Settler settler = new Settler();
    	Asteroid asteroid = new Asteroid();
    	Coal coal = new Coal();
    	
    	settler.setMain(this);
    	asteroid.setMain(this);
    	coal.setMain(this);
    	
    	settler.setName("settler");
    	asteroid.setName("asteroid");
    	coal.setName("coal");
    	
    	settler.setAsteroid(asteroid);
    	
    	 
    	 
    	
    	asteroid.setMaterial(coal);
    	asteroid.addEntity(settler);
    	
    	asteroid.setRockThickness(thickness);
    	asteroid.setCloseToSun(isClose);
    	
    	settler.drill();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the mozgas_robottal sequence and then executes it.
	 */
    public void mozgas_robottal() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Mozgas robottal");
    	
    	System.out.println("Lefutas:");
    	
    	Settler settler = new Settler();
    	Asteroid currentAsteroid = new Asteroid();
    	Asteroid destination = new Asteroid();
    	
    	settler.setMain(this);
    	currentAsteroid.setMain(this);
    	destination.setMain(this);
    	
    	settler.setName("settler");
    	currentAsteroid.setName("currentAsteroid");
    	destination.setName("destination");
    	
    	settler.setAsteroid(currentAsteroid);
    	
    	currentAsteroid.addNeighbour(destination);
    	currentAsteroid.addEntity(settler);
    	
    	destination.addNeighbour(currentAsteroid);
    	
    	settler.move(destination);
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the mozgas_telepessel sequence and then executes it.
	 */
    public void mozgas_telepessel() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Mozgas telepessel");
    	
    	System.out.println("Lefutas:");
    	
    	Robot robot = new Robot();
    	Asteroid currentAsteroid = new Asteroid();
    	Asteroid destination = new Asteroid();
    	
    	robot.setMain(this);
    	currentAsteroid.setMain(this);
    	destination.setMain(this);
    	
    	robot.setName("robot");
    	currentAsteroid.setName("currentAsteroid");
    	destination.setName("destination");
    	
    	robot.setAsteroid(currentAsteroid);
    	
    	currentAsteroid.addNeighbour(destination);
    	currentAsteroid.addEntity(robot);
    	
    	destination.addNeighbour(currentAsteroid);
    	
    	robot.move(destination);
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the teleportkapu_lehelyezese_par_egy_masik_aszteroidan sequence and then executes it.
	 */
    public void teleportkapu_lehelyezese_par_egy_masik_aszteroidan() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Teleportkapu lehelyezese par egy masik aszteroidan");
    	
    	System.out.println("Lefutas:");
    	
    	Game owner = new Game();
    	Asteroid asteroid = new Asteroid();
    	Asteroid neighbourAsteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	StarGate stargate = new StarGate();
    	StarGate neighbour = new StarGate();
    	
    	owner.setMain(this);
    	asteroid.setMain(this);
    	neighbourAsteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	stargate.setMain(this);
    	neighbour.setMain(this);
    	
    	settler.setName("settler");
    	asteroid.setName("asteroid");
    	owner.setName("owner");
    	neighbourAsteroid.setName("neighbourAsteroid");
    	inventory.setName("inventory");
    	stargate.setName("stargate");
    	neighbour.setName("neighbour");
    	
    	owner.addPlanet(asteroid);
    	owner.addPlanet(neighbourAsteroid);
    	owner.addSettler(settler);
    	
    	asteroid.setOwner(owner);
    	asteroid.addEntity(settler);
    	
    	neighbourAsteroid.setOwner(owner);
    	
    	settler.setOwner(owner);
    	settler.setAsteroid(asteroid);
    	settler.setInventory(inventory);
    	
    	neighbour.setAsteroid(neighbourAsteroid);
    	
    	inventory.addStarGate(stargate);
    	neighbour.setWorks(true);
    	
    	neighbourAsteroid.addBuilding(neighbour);
    	
    	// Linking teleports
    	stargate.setNeighbour(neighbour);
    	neighbour.setNeighbour(stargate);
    	
    	settler.placeStarGate();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the teleportkapu_lehelyezese_par_a_telepes_inventoryjaban sequence and then executes it.
	 */
    public void teleportkapu_lehelyezese_par_a_telepes_inventoryjaban() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Teleportkapu lehelyezese par a telepes inventory-jában");
    	
    	System.out.println("Lefutas:");
    	
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Asteroid asteroid = new Asteroid();
    	StarGate stargate = new StarGate();
    	StarGate neighbour = new StarGate();
    	
    	settler.setMain(this);
    	inventory.setMain(this);
    	asteroid.setMain(this);
    	stargate.setMain(this);
    	neighbour.setMain(this);
    	
    	settler.setName("settler");
    	inventory.setName("inventory");
    	asteroid.setName("asteroid");
    	stargate.setName("stargate");
    	neighbour.setName("neighbour");
    	
    	settler.setAsteroid(asteroid);
    	settler.setInventory(inventory);
    	
    	inventory.addStarGate(stargate);
    	inventory.addStarGate(neighbour);
    	
    	asteroid.addEntity(settler);
    	
    	// Linking teleports
    	stargate.setNeighbour(neighbour);
    	neighbour.setNeighbour(stargate);
    	
    	settler.placeStarGate();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }

    /**
     * 
	 */
    // This function sets up everything for the teleportkapu_lehelyezese_par_mar_elpusztult sequence and then executes it.
    public void teleportkapu_lehelyezese_par_mar_elpusztult() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Teleportkapu lehelyezese par mar elpusztult");
    	
    	System.out.println("Lefutas:");
    	
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Asteroid asteroid = new Asteroid();
    	StarGate stargate = new StarGate();
    	
    	settler.setMain(this);
    	inventory.setMain(this);
    	asteroid.setMain(this);
    	stargate.setMain(this);
    	
    	settler.setName("settler");
    	inventory.setName("inventory");
    	asteroid.setName("asteroid");
    	stargate.setName("stargate");
    	
    	settler.setAsteroid(asteroid);
    	settler.setInventory(inventory);
    	
    	inventory.addStarGate(stargate);
    	
    	stargate.setNeighbour(null);
    	
    	settler.placeStarGate();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the teleportkapu_epitese sequence and then executes it.
	 */
    public void teleportkapu_epitese() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Teleportkapu epitese");
    	
    	System.out.println("Lefutas:");
    	
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Inventory STARGATE_RECIPE = new Inventory();
    	Iron iron1 = new Iron();
    	Iron iron2 = new Iron();
    	Uran uran1 = new Uran();
    	Ice ice1 = new Ice();
    	Iron iron3 = new Iron();
    	Iron iron4 = new Iron();
    	Uran uran2 = new Uran();
    	Ice ice2 = new Ice();
    	
    	settler.setMain(this);
    	inventory.setMain(this);
    	STARGATE_RECIPE.setMain(this);
    	iron1.setMain(this);
    	iron2.setMain(this);
    	uran1.setMain(this);
    	ice1.setMain(this);
    	iron3.setMain(this);
    	iron4.setMain(this);
    	uran2.setMain(this);
    	ice2.setMain(this);
    	
    	settler.setName("settler");
    	inventory.setName("inventory");
    	STARGATE_RECIPE.setName("STARGATE_RECIPE");
    	iron1.setName("iron1");
    	iron2.setName("iron2");
    	uran1.setName("uran1");
    	ice1.setName("ice1");
    	iron3.setName("iron3");
    	iron4.setName("iron4");
    	uran2.setName("uran2");
    	ice2.setName("ice2");
    	
    	settler.setInventory(inventory);
    	settler.setSTARGATE_RECIPE(STARGATE_RECIPE);
    	
    	inventory.addInventory(iron1);
    	inventory.addInventory(iron2);
    	inventory.addInventory(uran1);
    	inventory.addInventory(ice1);
    	
    	STARGATE_RECIPE.addInventory(iron3);
    	STARGATE_RECIPE.addInventory(iron4);
    	STARGATE_RECIPE.addInventory(uran2);
    	STARGATE_RECIPE.addInventory(ice2);
    	
    	settler.buildStarGate();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * 
	 */
    // This function sets up everything for the bazis_epitese sequence and then executes it.
    public void bazis_epitese() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Bazis epitese");
    	
    	System.out.println("Lefutas:");
    	
    	Game owner = new Game();
    	Asteroid asteroid = new Asteroid();
    	Settler settler1 = new Settler();
    	Settler settler2 = new Settler();
    	Inventory inventory1 = new Inventory();
    	Inventory inventory2 = new Inventory();
    	Inventory BASE_RECIPE = new Inventory();
    	Iron iron1 = new Iron();
    	Iron iron2 = new Iron();
    	Iron iron3 = new Iron();
    	Uran uran1 = new Uran();
    	Uran uran2 = new Uran();
    	Uran uran3 = new Uran();
    	Ice ice1 = new Ice();
    	Ice ice2 = new Ice();
    	Ice ice3 = new Ice();
    	Coal coal1 = new Coal();
    	Coal coal2 = new Coal();
    	Coal coal3 = new Coal();
    	Iron iron4 = new Iron();
    	Iron iron5 = new Iron();
    	Iron iron6 = new Iron();
    	Uran uran4 = new Uran();
    	Uran uran5 = new Uran();
    	Uran uran6 = new Uran();
    	Ice ice4 = new Ice();
    	Ice ice5 = new Ice();
    	Ice ice6 = new Ice();
    	Coal coal4 = new Coal();
    	Coal coal5 = new Coal();
    	Coal coal6 = new Coal();
    	
    	owner.setMain(this);
    	asteroid.setMain(this);
    	settler1.setMain(this);
    	settler2.setMain(this);
    	inventory1.setMain(this);
    	inventory2.setMain(this);
    	BASE_RECIPE.setMain(this);
    	iron1.setMain(this);
    	iron2.setMain(this);
    	iron3.setMain(this);
    	uran1.setMain(this);
    	uran2.setMain(this);
    	uran3.setMain(this);
    	ice1.setMain(this);
    	ice2.setMain(this);
    	ice3.setMain(this);
    	coal1.setMain(this);
    	coal2.setMain(this);
    	coal3.setMain(this);
    	iron4.setMain(this);
    	iron5.setMain(this);
    	iron6.setMain(this);
    	uran4.setMain(this);
    	uran5.setMain(this);
    	uran6.setMain(this);
    	ice4.setMain(this);
    	ice5.setMain(this);
    	ice6.setMain(this);
    	coal4.setMain(this);
    	coal5.setMain(this);
    	coal6.setMain(this);
    	
    	owner.setName("owner");
    	asteroid.setName("asteroid");
    	settler1.setName("settler1");
    	settler2.setName("settler2");
    	inventory1.setName("inventory1");
    	inventory2.setName("inventory2");
    	BASE_RECIPE.setName("BASE_RECIPE");
    	iron1.setName("iron1");
    	iron2.setName("iron2");
    	iron3.setName("iron3");
    	uran1.setName("uran1");
    	uran2.setName("uran2");
    	uran3.setName("uran3");
    	ice1.setName("ice1");
    	ice2.setName("ice2");
    	ice3.setName("ice3");
    	coal1.setName("coal1");
    	coal2.setName("coal2");
    	coal3.setName("coal3");
    	iron4.setName("iron4");
    	iron5.setName("iron5");
    	iron6.setName("iron6");
    	uran4.setName("uran4");
    	uran5.setName("uran5");
    	uran6.setName("uran6");
    	ice4.setName("ice4");
    	ice5.setName("ice5");
    	ice6.setName("ice6");
    	coal4.setName("coal4");
    	coal5.setName("coal5");
    	coal6.setName("coal6");
    	
    	owner.addPlanet(asteroid);
    	owner.addSettler(settler1);
    	owner.addSettler(settler2);
    	
    	asteroid.setOwner(owner);
    	asteroid.addEntity(settler1);
    	asteroid.addEntity(settler2);
    	
    	settler1.setOwner(owner);
    	settler1.setAsteroid(asteroid);
    	settler1.setInventory(inventory1);
    	settler1.setBASE_RECIPE(BASE_RECIPE);
    	
    	settler2.setOwner(owner);
    	settler2.setAsteroid(asteroid);
    	settler2.setInventory(inventory2);
    	settler2.setBASE_RECIPE(BASE_RECIPE);
    	
    	inventory1.addInventory(iron1);
    	inventory1.addInventory(iron2);
    	inventory1.addInventory(iron3);
    	inventory1.addInventory(uran1);
    	inventory1.addInventory(uran2);
    	inventory1.addInventory(uran3);
    	
    	inventory2.addInventory(ice1);
    	inventory2.addInventory(ice2);
    	inventory2.addInventory(ice3);
    	inventory2.addInventory(coal1);
    	inventory2.addInventory(coal2);
    	inventory2.addInventory(coal3);
    	
    	BASE_RECIPE.addInventory(iron4);
    	BASE_RECIPE.addInventory(iron5);
    	BASE_RECIPE.addInventory(iron6);
    	BASE_RECIPE.addInventory(uran4);
    	BASE_RECIPE.addInventory(uran5);
    	BASE_RECIPE.addInventory(uran6);
    	BASE_RECIPE.addInventory(ice4);
    	BASE_RECIPE.addInventory(ice5);
    	BASE_RECIPE.addInventory(ice6);
    	BASE_RECIPE.addInventory(coal4);
    	BASE_RECIPE.addInventory(coal5);
    	BASE_RECIPE.addInventory(coal6);
    	
    	settler1.buildStarGate();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
    
    /**
     * This function sets up everything for the robot_epitese sequence and then executes it.
	 */
    public void robot_epitese() {
    	System.out.println("Aszteroida banyaszat");
    	System.out.println("Robot epitese");
    	
    	System.out.println("Lefutas:");
    	
    	Game owner = new Game();
    	Asteroid asteroid = new Asteroid();
    	Settler settler = new Settler();
    	Inventory inventory = new Inventory();
    	Inventory ROBOT_RECIPE = new Inventory();
    	Iron iron1 = new Iron();
    	Coal coal1 = new Coal();
    	Uran uran1 = new Uran();
    	Iron iron2 = new Iron();
    	Coal coal2 = new Coal();
    	Uran uran2 = new Uran();
    	
    	owner.setMain(this);
    	asteroid.setMain(this);
    	settler.setMain(this);
    	inventory.setMain(this);
    	ROBOT_RECIPE.setMain(this);
    	iron1.setMain(this);
    	coal1.setMain(this);
    	uran1.setMain(this);
    	iron2.setMain(this);
    	coal2.setMain(this);
    	uran2.setMain(this);
    	
    	owner.setName("owner");
    	asteroid.setName("asteroid");
    	settler.setName("settler");
    	inventory.setName("inventory");
    	ROBOT_RECIPE.setName("ROBOT_RECIPE");
    	iron1.setName("iron1");
    	coal1.setName("coal1");
    	uran1.setName("uran1");
    	iron2.setName("iron2");
    	coal2.setName("coal2");
    	uran2.setName("uran2");
    	
    	owner.addPlanet(asteroid);
    	owner.addSettler(settler);
    	
    	asteroid.setOwner(owner);
    	asteroid.addEntity(settler);
    	
    	settler.setOwner(owner);
    	settler.setAsteroid(asteroid);
    	settler.setROBOT_RECIPE(ROBOT_RECIPE);
    	settler.setInventory(inventory);
    	
    	inventory.addInventory(iron1);
    	inventory.addInventory(coal1);
    	inventory.addInventory(uran1);
    	
    	ROBOT_RECIPE.addInventory(iron2);
    	ROBOT_RECIPE.addInventory(coal2);
    	ROBOT_RECIPE.addInventory(uran2);
    	
    	settler.buildRobot();
    	
    	System.out.println("0 Visszalepes");
    	
    	int num = scanNumber();
    	
    	while (num != 0)
    		num = scanNumber();
    	
    	return;
    }
}
