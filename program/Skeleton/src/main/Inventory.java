package main;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Space-Miner
//  @ File Name : Inventory.java
//  @ Date : 17/03/2021
//  @ Author : Barkanyi
//
//

/**
 * List are only available in java7 or older.
 * @author Barkanyi
 *
 */
public class Inventory extends Printable{
	private LinkedList<Material> materials;
	private LinkedList<StarGate> starGates;
	private int capacityM;
	private int capacitySG;

//Constructors:----------------------------------------------------------------
	
	/**
	 * Constructor for Inventory without parameters.
	 */
	Inventory(){
		this.materials = new LinkedList<>();
		this.starGates = new LinkedList<>();
		this.capacityM = 10;
		this.capacitySG = 3;
	}
	
	/**
	 * Constructor for the Inventory which sets all parameters at once.
	 * @param materials
	 * @param starGate
	 */
	Inventory(LinkedList<Material> materials, LinkedList<StarGate> starGates, int capacityM, int capacitySG){
		this.materials = materials;
		this.starGates = starGates;
		this.capacityM = capacityM;
		this.capacitySG = capacitySG;
	}

//Get/Set-----------------------------------------------------------------

	/**
	 * Getter of the materials.
	 * @return materials: LinkedList<Material>
	 */
	public LinkedList<Material> getMaterials(){
		return materials;
	}
	
	public int getStarGatesCount() {
		if(starGates!=null)return starGates.size();
		return 0;
	}
	
	public int getMaterialsCount() {
		if(materials!=null)return materials.size();
		return 0;
	}

//Inherited:-----------------------------------------------------------------------------

	//Printable
		
	/**
	* creates a string with this class' all important data.
	*
	* @return string containing all the important information for the user
	*/
	@Override
	public String genUIString() {
		String dataMaterial = "materials:\n";
		for(Material material : materials) {
			dataMaterial += "	material" + material.getId() + "\n";
		}
		String dataStarGate = "starGates:\n";
		for(StarGate starGate : starGates) {
			dataStarGate += "	starGate: " + starGate.getId() + "\n";
		}	
		return "Inventory id: " + id + "\n"
				+ dataMaterial + dataStarGate;
	}

//Own methods:----------------------------------------------------------------------------

	/**
	 * Remove a material to the materials which are in the inventory.
	 * @param m the material that will be removed from the inventory
	 * @return removed material or null if the inventory not contains the material
	 */
	public Material removeMaterial(Material m) {
	
		if(materials.remove(m)) {
			return m;
		}
		return null;
	}
	
	/**
	 * Remove a stargate to the stargates which are in the inventory.
	 * @return removed stargate or null if the inventory not contains stargate
	 */
	public StarGate removeStarGate() {
		
		if(starGates.size()!=0) {
			return starGates.get(0);
		}
		return null;
	}
	
	/**
	 * Compares the given and the local inventory material list and 
	 * returns with the not remainder.
	 * @param i the given inventory
	 * @return remainder
	 */
	public Inventory subSet(Inventory i) {
		Inventory remainder = new Inventory();
		
		Iterator<Material> iRecipe = materials.iterator();
	    while (iRecipe.hasNext()) {
	    	
	    	Material material = i.removeMaterial(iRecipe.next());
	    	if(material==null) {
	    		remainder.addMaterial(material);
	    	}
	    	else {
	    		 i.addMaterial(material);
	    	}
	    }

		return remainder;
	}
	
	/**
 	 *Compares the given and the local inventory materials list and
	 *removes all contained element and return the remainder.
	 * @param i the given inventory
	 * @return differences
	 */
	public Inventory subtraction(Inventory i) {
		Inventory remainder = new Inventory();
		
		Iterator<Material> iRecipe = materials.iterator();
	    while (iRecipe.hasNext()) {
	    	
	    	Material material = i.removeMaterial(iRecipe.next());
	    	if(material==null) {
	    		remainder.addMaterial(material);
	    	}
	    }
		return remainder;
	}	
	
	/**
	 * Adds the given stargate to the stargate list.
	 * @param sg the stargate the will be added to the stargate list
	 */
	public void addStarGate(StarGate sg) {

		if(starGates.size()<capacitySG) {
			starGates.add(sg);
		}
	}
	
	/**
	 * Adds the given material to the materials list.
	 * @param m the material the will be added to the materials list
	 */
	public void addMaterial(Material m) {
		if (m != null && materials.size()<capacityM)
		{
			materials.add(m);
		}
	}

}
		